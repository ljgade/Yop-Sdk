<?php
/**
 * UnionPayOrderQueryAuthReportDetailResponseDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 环球易汇
 *
 * <p>营销产品码：VCC_GLOBAL &nbsp;</p> <p>产品名称：环球易汇&nbsp;</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\AtVcc\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * UnionPayOrderQueryAuthReportDetailResponseDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnionPayOrderQueryAuthReportDetailResponseDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UnionPayOrderQueryAuthReportDetailResponseDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tradeId' => 'string',
        'transactionType' => 'string',
        'transactionTime' => 'string',
        'swipeCardAmount' => 'float',
        'swipeCardCurrency' => 'string',
        'transactionAmount' => 'float',
        'transactionCurrency' => 'string',
        'merchantName' => 'string',
        'merchantCity' => 'string',
        'merchantCountryName' => 'string',
        'mcc' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tradeId' => null,
        'transactionType' => null,
        'transactionTime' => 'date-time',
        'swipeCardAmount' => null,
        'swipeCardCurrency' => null,
        'transactionAmount' => null,
        'transactionCurrency' => null,
        'merchantName' => null,
        'merchantCity' => null,
        'merchantCountryName' => null,
        'mcc' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tradeId' => 'tradeId',
        'transactionType' => 'transactionType',
        'transactionTime' => 'transactionTime',
        'swipeCardAmount' => 'swipeCardAmount',
        'swipeCardCurrency' => 'swipeCardCurrency',
        'transactionAmount' => 'transactionAmount',
        'transactionCurrency' => 'transactionCurrency',
        'merchantName' => 'merchantName',
        'merchantCity' => 'merchantCity',
        'merchantCountryName' => 'merchantCountryName',
        'mcc' => 'mcc',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tradeId' => 'setTradeId',
        'transactionType' => 'setTransactionType',
        'transactionTime' => 'setTransactionTime',
        'swipeCardAmount' => 'setSwipeCardAmount',
        'swipeCardCurrency' => 'setSwipeCardCurrency',
        'transactionAmount' => 'setTransactionAmount',
        'transactionCurrency' => 'setTransactionCurrency',
        'merchantName' => 'setMerchantName',
        'merchantCity' => 'setMerchantCity',
        'merchantCountryName' => 'setMerchantCountryName',
        'mcc' => 'setMcc',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tradeId' => 'getTradeId',
        'transactionType' => 'getTransactionType',
        'transactionTime' => 'getTransactionTime',
        'swipeCardAmount' => 'getSwipeCardAmount',
        'swipeCardCurrency' => 'getSwipeCardCurrency',
        'transactionAmount' => 'getTransactionAmount',
        'transactionCurrency' => 'getTransactionCurrency',
        'merchantName' => 'getMerchantName',
        'merchantCity' => 'getMerchantCity',
        'merchantCountryName' => 'getMerchantCountryName',
        'mcc' => 'getMcc',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tradeId'] = isset($data['tradeId']) ? $data['tradeId'] : null;
        $this->container['transactionType'] = isset($data['transactionType']) ? $data['transactionType'] : null;
        $this->container['transactionTime'] = isset($data['transactionTime']) ? $data['transactionTime'] : null;
        $this->container['swipeCardAmount'] = isset($data['swipeCardAmount']) ? $data['swipeCardAmount'] : null;
        $this->container['swipeCardCurrency'] = isset($data['swipeCardCurrency']) ? $data['swipeCardCurrency'] : null;
        $this->container['transactionAmount'] = isset($data['transactionAmount']) ? $data['transactionAmount'] : null;
        $this->container['transactionCurrency'] = isset($data['transactionCurrency']) ? $data['transactionCurrency'] : null;
        $this->container['merchantName'] = isset($data['merchantName']) ? $data['merchantName'] : null;
        $this->container['merchantCity'] = isset($data['merchantCity']) ? $data['merchantCity'] : null;
        $this->container['merchantCountryName'] = isset($data['merchantCountryName']) ? $data['merchantCountryName'] : null;
        $this->container['mcc'] = isset($data['mcc']) ? $data['mcc'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tradeId
     *
     * @return string
     */
    public function getTradeId()
    {
        return $this->container['tradeId'];
    }

    /**
     * Sets tradeId
     *
     * @param string $tradeId 交易标识号
     *
     * @return $this
     */
    public function setTradeId($tradeId)
    {
        $this->container['tradeId'] = $tradeId;

        return $this;
    }

    /**
     * Gets transactionType
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param string $transactionType 交易类型
     *
     * @return $this
     */
    public function setTransactionType($transactionType)
    {
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets transactionTime
     *
     * @return string
     */
    public function getTransactionTime()
    {
        return $this->container['transactionTime'];
    }

    /**
     * Sets transactionTime
     *
     * @param string $transactionTime 交易时间
     *
     * @return $this
     */
    public function setTransactionTime($transactionTime)
    {
        $this->container['transactionTime'] = $transactionTime;

        return $this;
    }

    /**
     * Gets swipeCardAmount
     *
     * @return float
     */
    public function getSwipeCardAmount()
    {
        return $this->container['swipeCardAmount'];
    }

    /**
     * Sets swipeCardAmount
     *
     * @param float $swipeCardAmount 刷卡金额
     *
     * @return $this
     */
    public function setSwipeCardAmount($swipeCardAmount)
    {
        $this->container['swipeCardAmount'] = $swipeCardAmount;

        return $this;
    }

    /**
     * Gets swipeCardCurrency
     *
     * @return string
     */
    public function getSwipeCardCurrency()
    {
        return $this->container['swipeCardCurrency'];
    }

    /**
     * Sets swipeCardCurrency
     *
     * @param string $swipeCardCurrency 刷卡币种
     *
     * @return $this
     */
    public function setSwipeCardCurrency($swipeCardCurrency)
    {
        $this->container['swipeCardCurrency'] = $swipeCardCurrency;

        return $this;
    }

    /**
     * Gets transactionAmount
     *
     * @return float
     */
    public function getTransactionAmount()
    {
        return $this->container['transactionAmount'];
    }

    /**
     * Sets transactionAmount
     *
     * @param float $transactionAmount 交易金额
     *
     * @return $this
     */
    public function setTransactionAmount($transactionAmount)
    {
        $this->container['transactionAmount'] = $transactionAmount;

        return $this;
    }

    /**
     * Gets transactionCurrency
     *
     * @return string
     */
    public function getTransactionCurrency()
    {
        return $this->container['transactionCurrency'];
    }

    /**
     * Sets transactionCurrency
     *
     * @param string $transactionCurrency 交易币种
     *
     * @return $this
     */
    public function setTransactionCurrency($transactionCurrency)
    {
        $this->container['transactionCurrency'] = $transactionCurrency;

        return $this;
    }

    /**
     * Gets merchantName
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchantName'];
    }

    /**
     * Sets merchantName
     *
     * @param string $merchantName 收款商户名
     *
     * @return $this
     */
    public function setMerchantName($merchantName)
    {
        $this->container['merchantName'] = $merchantName;

        return $this;
    }

    /**
     * Gets merchantCity
     *
     * @return string
     */
    public function getMerchantCity()
    {
        return $this->container['merchantCity'];
    }

    /**
     * Sets merchantCity
     *
     * @param string $merchantCity 收款方城市
     *
     * @return $this
     */
    public function setMerchantCity($merchantCity)
    {
        $this->container['merchantCity'] = $merchantCity;

        return $this;
    }

    /**
     * Gets merchantCountryName
     *
     * @return string
     */
    public function getMerchantCountryName()
    {
        return $this->container['merchantCountryName'];
    }

    /**
     * Sets merchantCountryName
     *
     * @param string $merchantCountryName 收款方国家
     *
     * @return $this
     */
    public function setMerchantCountryName($merchantCountryName)
    {
        $this->container['merchantCountryName'] = $merchantCountryName;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string $mcc mcc
     *
     * @return $this
     */
    public function setMcc($mcc)
    {
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 状态
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


