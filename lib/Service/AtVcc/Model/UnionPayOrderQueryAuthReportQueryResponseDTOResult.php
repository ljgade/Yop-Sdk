<?php
/**
 * UnionPayOrderQueryAuthReportQueryResponseDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 环球易汇
 *
 * <p>营销产品码：VCC_GLOBAL &nbsp;</p> <p>产品名称：环球易汇&nbsp;</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\AtVcc\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * UnionPayOrderQueryAuthReportQueryResponseDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnionPayOrderQueryAuthReportQueryResponseDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UnionPayOrderQueryAuthReportQueryResponseDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'retCode' => 'string',
        'retMsg' => 'string',
        'requestNo' => 'string',
        'customerNo' => 'string',
        'cardNo' => 'string',
        'extInfo' => 'string',
        'cardUseType' => 'string',
        'openCardTime' => 'string',
        'cardUseOutTime' => 'string',
        'cardOrganization' => 'string',
        'details' => '\Yeepay\Yop\Sdk\Service\AtVcc\Model\UnionPayOrderQueryAuthReportDetailResponseDTOResult[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'retCode' => null,
        'retMsg' => null,
        'requestNo' => null,
        'customerNo' => null,
        'cardNo' => null,
        'extInfo' => null,
        'cardUseType' => null,
        'openCardTime' => 'date-time',
        'cardUseOutTime' => 'date-time',
        'cardOrganization' => null,
        'details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'retCode' => 'retCode',
        'retMsg' => 'retMsg',
        'requestNo' => 'requestNo',
        'customerNo' => 'customerNo',
        'cardNo' => 'cardNo',
        'extInfo' => 'extInfo',
        'cardUseType' => 'cardUseType',
        'openCardTime' => 'openCardTime',
        'cardUseOutTime' => 'cardUseOutTime',
        'cardOrganization' => 'cardOrganization',
        'details' => 'details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'retCode' => 'setRetCode',
        'retMsg' => 'setRetMsg',
        'requestNo' => 'setRequestNo',
        'customerNo' => 'setCustomerNo',
        'cardNo' => 'setCardNo',
        'extInfo' => 'setExtInfo',
        'cardUseType' => 'setCardUseType',
        'openCardTime' => 'setOpenCardTime',
        'cardUseOutTime' => 'setCardUseOutTime',
        'cardOrganization' => 'setCardOrganization',
        'details' => 'setDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'retCode' => 'getRetCode',
        'retMsg' => 'getRetMsg',
        'requestNo' => 'getRequestNo',
        'customerNo' => 'getCustomerNo',
        'cardNo' => 'getCardNo',
        'extInfo' => 'getExtInfo',
        'cardUseType' => 'getCardUseType',
        'openCardTime' => 'getOpenCardTime',
        'cardUseOutTime' => 'getCardUseOutTime',
        'cardOrganization' => 'getCardOrganization',
        'details' => 'getDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['retCode'] = isset($data['retCode']) ? $data['retCode'] : null;
        $this->container['retMsg'] = isset($data['retMsg']) ? $data['retMsg'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['customerNo'] = isset($data['customerNo']) ? $data['customerNo'] : null;
        $this->container['cardNo'] = isset($data['cardNo']) ? $data['cardNo'] : null;
        $this->container['extInfo'] = isset($data['extInfo']) ? $data['extInfo'] : null;
        $this->container['cardUseType'] = isset($data['cardUseType']) ? $data['cardUseType'] : null;
        $this->container['openCardTime'] = isset($data['openCardTime']) ? $data['openCardTime'] : null;
        $this->container['cardUseOutTime'] = isset($data['cardUseOutTime']) ? $data['cardUseOutTime'] : null;
        $this->container['cardOrganization'] = isset($data['cardOrganization']) ? $data['cardOrganization'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets retCode
     *
     * @return string
     */
    public function getRetCode()
    {
        return $this->container['retCode'];
    }

    /**
     * Sets retCode
     *
     * @param string $retCode 返回码
     *
     * @return $this
     */
    public function setRetCode($retCode)
    {
        $this->container['retCode'] = $retCode;

        return $this;
    }

    /**
     * Gets retMsg
     *
     * @return string
     */
    public function getRetMsg()
    {
        return $this->container['retMsg'];
    }

    /**
     * Sets retMsg
     *
     * @param string $retMsg 返回信息
     *
     * @return $this
     */
    public function setRetMsg($retMsg)
    {
        $this->container['retMsg'] = $retMsg;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo 商户申卡请求号
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets customerNo
     *
     * @return string
     */
    public function getCustomerNo()
    {
        return $this->container['customerNo'];
    }

    /**
     * Sets customerNo
     *
     * @param string $customerNo 商户编号
     *
     * @return $this
     */
    public function setCustomerNo($customerNo)
    {
        $this->container['customerNo'] = $customerNo;

        return $this;
    }

    /**
     * Gets cardNo
     *
     * @return string
     */
    public function getCardNo()
    {
        return $this->container['cardNo'];
    }

    /**
     * Sets cardNo
     *
     * @param string $cardNo 卡号
     *
     * @return $this
     */
    public function setCardNo($cardNo)
    {
        $this->container['cardNo'] = $cardNo;

        return $this;
    }

    /**
     * Gets extInfo
     *
     * @return string
     */
    public function getExtInfo()
    {
        return $this->container['extInfo'];
    }

    /**
     * Sets extInfo
     *
     * @param string $extInfo 关联信息
     *
     * @return $this
     */
    public function setExtInfo($extInfo)
    {
        $this->container['extInfo'] = $extInfo;

        return $this;
    }

    /**
     * Gets cardUseType
     *
     * @return string
     */
    public function getCardUseType()
    {
        return $this->container['cardUseType'];
    }

    /**
     * Sets cardUseType
     *
     * @param string $cardUseType 卡类型
     *
     * @return $this
     */
    public function setCardUseType($cardUseType)
    {
        $this->container['cardUseType'] = $cardUseType;

        return $this;
    }

    /**
     * Gets openCardTime
     *
     * @return string
     */
    public function getOpenCardTime()
    {
        return $this->container['openCardTime'];
    }

    /**
     * Sets openCardTime
     *
     * @param string $openCardTime 开卡时间
     *
     * @return $this
     */
    public function setOpenCardTime($openCardTime)
    {
        $this->container['openCardTime'] = $openCardTime;

        return $this;
    }

    /**
     * Gets cardUseOutTime
     *
     * @return string
     */
    public function getCardUseOutTime()
    {
        return $this->container['cardUseOutTime'];
    }

    /**
     * Sets cardUseOutTime
     *
     * @param string $cardUseOutTime 关闭时间
     *
     * @return $this
     */
    public function setCardUseOutTime($cardUseOutTime)
    {
        $this->container['cardUseOutTime'] = $cardUseOutTime;

        return $this;
    }

    /**
     * Gets cardOrganization
     *
     * @return string
     */
    public function getCardOrganization()
    {
        return $this->container['cardOrganization'];
    }

    /**
     * Sets cardOrganization
     *
     * @param string $cardOrganization 卡组织
     *
     * @return $this
     */
    public function setCardOrganization($cardOrganization)
    {
        $this->container['cardOrganization'] = $cardOrganization;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Yeepay\Yop\Sdk\Service\AtVcc\Model\UnionPayOrderQueryAuthReportDetailResponseDTOResult[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Yeepay\Yop\Sdk\Service\AtVcc\Model\UnionPayOrderQueryAuthReportDetailResponseDTOResult[] $details 明细
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


