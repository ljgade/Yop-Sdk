<?php
/**
 * QrcodeQueryQrCodeApiInfoResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 电信支付
 *
 * <p>电信行业线易宝通应用-支付服务</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\TelPay\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * QrcodeQueryQrCodeApiInfoResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QrcodeQueryQrCodeApiInfoResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QrcodeQueryQrCodeApiInfoResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'qrId' => 'string',
        'merchantNo' => 'string',
        'qrShortName' => 'string',
        'qrStatus' => 'string',
        'qrContent' => 'string',
        'createTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'qrId' => null,
        'merchantNo' => null,
        'qrShortName' => null,
        'qrStatus' => null,
        'qrContent' => null,
        'createTime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'qrId' => 'qrId',
        'merchantNo' => 'merchantNo',
        'qrShortName' => 'qrShortName',
        'qrStatus' => 'qrStatus',
        'qrContent' => 'qrContent',
        'createTime' => 'createTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'qrId' => 'setQrId',
        'merchantNo' => 'setMerchantNo',
        'qrShortName' => 'setQrShortName',
        'qrStatus' => 'setQrStatus',
        'qrContent' => 'setQrContent',
        'createTime' => 'setCreateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'qrId' => 'getQrId',
        'merchantNo' => 'getMerchantNo',
        'qrShortName' => 'getQrShortName',
        'qrStatus' => 'getQrStatus',
        'qrContent' => 'getQrContent',
        'createTime' => 'getCreateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['qrId'] = isset($data['qrId']) ? $data['qrId'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['qrShortName'] = isset($data['qrShortName']) ? $data['qrShortName'] : null;
        $this->container['qrStatus'] = isset($data['qrStatus']) ? $data['qrStatus'] : null;
        $this->container['qrContent'] = isset($data['qrContent']) ? $data['qrContent'] : null;
        $this->container['createTime'] = isset($data['createTime']) ? $data['createTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets qrId
     *
     * @return string
     */
    public function getQrId()
    {
        return $this->container['qrId'];
    }

    /**
     * Sets qrId
     *
     * @param string $qrId 二维码id
     *
     * @return $this
     */
    public function setQrId($qrId)
    {
        $this->container['qrId'] = $qrId;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo 收款商编
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets qrShortName
     *
     * @return string
     */
    public function getQrShortName()
    {
        return $this->container['qrShortName'];
    }

    /**
     * Sets qrShortName
     *
     * @param string $qrShortName 二维码简称
     *
     * @return $this
     */
    public function setQrShortName($qrShortName)
    {
        $this->container['qrShortName'] = $qrShortName;

        return $this;
    }

    /**
     * Gets qrStatus
     *
     * @return string
     */
    public function getQrStatus()
    {
        return $this->container['qrStatus'];
    }

    /**
     * Sets qrStatus
     *
     * @param string $qrStatus 二维码状态
     *
     * @return $this
     */
    public function setQrStatus($qrStatus)
    {
        $this->container['qrStatus'] = $qrStatus;

        return $this;
    }

    /**
     * Gets qrContent
     *
     * @return string
     */
    public function getQrContent()
    {
        return $this->container['qrContent'];
    }

    /**
     * Sets qrContent
     *
     * @param string $qrContent 二维码地址信息
     *
     * @return $this
     */
    public function setQrContent($qrContent)
    {
        $this->container['qrContent'] = $qrContent;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param string $createTime 创建时间
     *
     * @return $this
     */
    public function setCreateTime($createTime)
    {
        $this->container['createTime'] = $createTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


