<?php
/**
 * RecordQueryApplyInvoiceYOPResponseDtoResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 发票服务
 *
 * <p>基于中台商户实际开票场景，提供给商户维护开票规则、票面信息，查询票面信息，申请开具手续费发票，查询开票记录，查询实收手续费金额的服务</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Invoice\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * RecordQueryApplyInvoiceYOPResponseDtoResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecordQueryApplyInvoiceYOPResponseDtoResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecordQueryApplyInvoiceYOPResponseDtoResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchantNo' => 'string',
        'customerRequestNo' => 'string',
        'code' => 'string',
        'message' => 'string',
        'status' => 'string',
        'createDate' => 'string',
        'chargingDateStart' => 'string',
        'chargingDateEnd' => 'string',
        'chargingMode' => 'string',
        'invoiceForm' => 'string',
        'amount' => 'float',
        'notifyType' => 'string',
        'issueInvoiceDtoList' => '\Yeepay\Yop\Sdk\Service\Invoice\Model\RecordQueryIssueInvoiceDtoResult[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchantNo' => null,
        'customerRequestNo' => null,
        'code' => null,
        'message' => null,
        'status' => null,
        'createDate' => 'date-time',
        'chargingDateStart' => 'date-time',
        'chargingDateEnd' => 'date-time',
        'chargingMode' => null,
        'invoiceForm' => null,
        'amount' => null,
        'notifyType' => null,
        'issueInvoiceDtoList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantNo' => 'merchantNo',
        'customerRequestNo' => 'customerRequestNo',
        'code' => 'code',
        'message' => 'message',
        'status' => 'status',
        'createDate' => 'createDate',
        'chargingDateStart' => 'chargingDateStart',
        'chargingDateEnd' => 'chargingDateEnd',
        'chargingMode' => 'chargingMode',
        'invoiceForm' => 'invoiceForm',
        'amount' => 'amount',
        'notifyType' => 'notifyType',
        'issueInvoiceDtoList' => 'issueInvoiceDtoList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantNo' => 'setMerchantNo',
        'customerRequestNo' => 'setCustomerRequestNo',
        'code' => 'setCode',
        'message' => 'setMessage',
        'status' => 'setStatus',
        'createDate' => 'setCreateDate',
        'chargingDateStart' => 'setChargingDateStart',
        'chargingDateEnd' => 'setChargingDateEnd',
        'chargingMode' => 'setChargingMode',
        'invoiceForm' => 'setInvoiceForm',
        'amount' => 'setAmount',
        'notifyType' => 'setNotifyType',
        'issueInvoiceDtoList' => 'setIssueInvoiceDtoList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantNo' => 'getMerchantNo',
        'customerRequestNo' => 'getCustomerRequestNo',
        'code' => 'getCode',
        'message' => 'getMessage',
        'status' => 'getStatus',
        'createDate' => 'getCreateDate',
        'chargingDateStart' => 'getChargingDateStart',
        'chargingDateEnd' => 'getChargingDateEnd',
        'chargingMode' => 'getChargingMode',
        'invoiceForm' => 'getInvoiceForm',
        'amount' => 'getAmount',
        'notifyType' => 'getNotifyType',
        'issueInvoiceDtoList' => 'getIssueInvoiceDtoList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['customerRequestNo'] = isset($data['customerRequestNo']) ? $data['customerRequestNo'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['createDate'] = isset($data['createDate']) ? $data['createDate'] : null;
        $this->container['chargingDateStart'] = isset($data['chargingDateStart']) ? $data['chargingDateStart'] : null;
        $this->container['chargingDateEnd'] = isset($data['chargingDateEnd']) ? $data['chargingDateEnd'] : null;
        $this->container['chargingMode'] = isset($data['chargingMode']) ? $data['chargingMode'] : null;
        $this->container['invoiceForm'] = isset($data['invoiceForm']) ? $data['invoiceForm'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['notifyType'] = isset($data['notifyType']) ? $data['notifyType'] : null;
        $this->container['issueInvoiceDtoList'] = isset($data['issueInvoiceDtoList']) ? $data['issueInvoiceDtoList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo 商编
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets customerRequestNo
     *
     * @return string
     */
    public function getCustomerRequestNo()
    {
        return $this->container['customerRequestNo'];
    }

    /**
     * Sets customerRequestNo
     *
     * @param string $customerRequestNo 请求号
     *
     * @return $this
     */
    public function setCustomerRequestNo($customerRequestNo)
    {
        $this->container['customerRequestNo'] = $customerRequestNo;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code 返回码
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message 返回信息
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 发票申请状态
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets createDate
     *
     * @return string
     */
    public function getCreateDate()
    {
        return $this->container['createDate'];
    }

    /**
     * Sets createDate
     *
     * @param string $createDate 申请时间
     *
     * @return $this
     */
    public function setCreateDate($createDate)
    {
        $this->container['createDate'] = $createDate;

        return $this;
    }

    /**
     * Gets chargingDateStart
     *
     * @return string
     */
    public function getChargingDateStart()
    {
        return $this->container['chargingDateStart'];
    }

    /**
     * Sets chargingDateStart
     *
     * @param string $chargingDateStart 收费开始时间
     *
     * @return $this
     */
    public function setChargingDateStart($chargingDateStart)
    {
        $this->container['chargingDateStart'] = $chargingDateStart;

        return $this;
    }

    /**
     * Gets chargingDateEnd
     *
     * @return string
     */
    public function getChargingDateEnd()
    {
        return $this->container['chargingDateEnd'];
    }

    /**
     * Sets chargingDateEnd
     *
     * @param string $chargingDateEnd 收费结束时间
     *
     * @return $this
     */
    public function setChargingDateEnd($chargingDateEnd)
    {
        $this->container['chargingDateEnd'] = $chargingDateEnd;

        return $this;
    }

    /**
     * Gets chargingMode
     *
     * @return string
     */
    public function getChargingMode()
    {
        return $this->container['chargingMode'];
    }

    /**
     * Sets chargingMode
     *
     * @param string $chargingMode 计费模式
     *
     * @return $this
     */
    public function setChargingMode($chargingMode)
    {
        $this->container['chargingMode'] = $chargingMode;

        return $this;
    }

    /**
     * Gets invoiceForm
     *
     * @return string
     */
    public function getInvoiceForm()
    {
        return $this->container['invoiceForm'];
    }

    /**
     * Sets invoiceForm
     *
     * @param string $invoiceForm 发票形式
     *
     * @return $this
     */
    public function setInvoiceForm($invoiceForm)
    {
        $this->container['invoiceForm'] = $invoiceForm;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount 收费金额
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets notifyType
     *
     * @return string
     */
    public function getNotifyType()
    {
        return $this->container['notifyType'];
    }

    /**
     * Sets notifyType
     *
     * @param string $notifyType 通知类型
     *
     * @return $this
     */
    public function setNotifyType($notifyType)
    {
        $this->container['notifyType'] = $notifyType;

        return $this;
    }

    /**
     * Gets issueInvoiceDtoList
     *
     * @return \Yeepay\Yop\Sdk\Service\Invoice\Model\RecordQueryIssueInvoiceDtoResult[]
     */
    public function getIssueInvoiceDtoList()
    {
        return $this->container['issueInvoiceDtoList'];
    }

    /**
     * Sets issueInvoiceDtoList
     *
     * @param \Yeepay\Yop\Sdk\Service\Invoice\Model\RecordQueryIssueInvoiceDtoResult[] $issueInvoiceDtoList 开票记录列表
     *
     * @return $this
     */
    public function setIssueInvoiceDtoList($issueInvoiceDtoList)
    {
        $this->container['issueInvoiceDtoList'] = $issueInvoiceDtoList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


