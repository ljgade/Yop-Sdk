<?php
/**
 * QueryOpenResultResponseDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 会员钱包
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\MWallet\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * QueryOpenResultResponseDTO Class Doc Comment
 *
 * @category Class
 * @description 响应结果
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueryOpenResultResponseDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryOpenResultResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'returnCode' => 'string',
        'returnMsg' => 'string',
        'requestNo' => 'string',
        'yeepayOrderNo' => 'string',
        'applyStatus' => 'string',
        'elecAccount' => 'string',
        'bankAccountLevel' => 'string',
        'accountType' => 'string',
        'yeepayMemberNo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'returnCode' => null,
        'returnMsg' => null,
        'requestNo' => null,
        'yeepayOrderNo' => null,
        'applyStatus' => null,
        'elecAccount' => null,
        'bankAccountLevel' => null,
        'accountType' => null,
        'yeepayMemberNo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'returnCode' => 'returnCode',
        'returnMsg' => 'returnMsg',
        'requestNo' => 'requestNo',
        'yeepayOrderNo' => 'yeepayOrderNo',
        'applyStatus' => 'applyStatus',
        'elecAccount' => 'elecAccount',
        'bankAccountLevel' => 'bankAccountLevel',
        'accountType' => 'accountType',
        'yeepayMemberNo' => 'yeepayMemberNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'returnCode' => 'setReturnCode',
        'returnMsg' => 'setReturnMsg',
        'requestNo' => 'setRequestNo',
        'yeepayOrderNo' => 'setYeepayOrderNo',
        'applyStatus' => 'setApplyStatus',
        'elecAccount' => 'setElecAccount',
        'bankAccountLevel' => 'setBankAccountLevel',
        'accountType' => 'setAccountType',
        'yeepayMemberNo' => 'setYeepayMemberNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'returnCode' => 'getReturnCode',
        'returnMsg' => 'getReturnMsg',
        'requestNo' => 'getRequestNo',
        'yeepayOrderNo' => 'getYeepayOrderNo',
        'applyStatus' => 'getApplyStatus',
        'elecAccount' => 'getElecAccount',
        'bankAccountLevel' => 'getBankAccountLevel',
        'accountType' => 'getAccountType',
        'yeepayMemberNo' => 'getYeepayMemberNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['returnCode'] = isset($data['returnCode']) ? $data['returnCode'] : null;
        $this->container['returnMsg'] = isset($data['returnMsg']) ? $data['returnMsg'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['yeepayOrderNo'] = isset($data['yeepayOrderNo']) ? $data['yeepayOrderNo'] : null;
        $this->container['applyStatus'] = isset($data['applyStatus']) ? $data['applyStatus'] : null;
        $this->container['elecAccount'] = isset($data['elecAccount']) ? $data['elecAccount'] : null;
        $this->container['bankAccountLevel'] = isset($data['bankAccountLevel']) ? $data['bankAccountLevel'] : null;
        $this->container['accountType'] = isset($data['accountType']) ? $data['accountType'] : null;
        $this->container['yeepayMemberNo'] = isset($data['yeepayMemberNo']) ? $data['yeepayMemberNo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets returnCode
     *
     * @return string
     */
    public function getReturnCode()
    {
        return $this->container['returnCode'];
    }

    /**
     * Sets returnCode
     *
     * @param string $returnCode 返回码
     *
     * @return $this
     */
    public function setReturnCode($returnCode)
    {
        $this->container['returnCode'] = $returnCode;

        return $this;
    }

    /**
     * Gets returnMsg
     *
     * @return string
     */
    public function getReturnMsg()
    {
        return $this->container['returnMsg'];
    }

    /**
     * Sets returnMsg
     *
     * @param string $returnMsg 返回信息
     *
     * @return $this
     */
    public function setReturnMsg($returnMsg)
    {
        $this->container['returnMsg'] = $returnMsg;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo 商户请求号
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets yeepayOrderNo
     *
     * @return string
     */
    public function getYeepayOrderNo()
    {
        return $this->container['yeepayOrderNo'];
    }

    /**
     * Sets yeepayOrderNo
     *
     * @param string $yeepayOrderNo 易宝开户申请号
     *
     * @return $this
     */
    public function setYeepayOrderNo($yeepayOrderNo)
    {
        $this->container['yeepayOrderNo'] = $yeepayOrderNo;

        return $this;
    }

    /**
     * Gets applyStatus
     *
     * @return string
     */
    public function getApplyStatus()
    {
        return $this->container['applyStatus'];
    }

    /**
     * Sets applyStatus
     *
     * @param string $applyStatus 开户状态<br>可选项如下:<br>WAITPROVE:开户处理中-等待回填短验<br>UNACTIVATED:开户成功-卡片激活失败<br>SUCCESS:开户成功-卡片已激活<br>FAIL:开户失败
     *
     * @return $this
     */
    public function setApplyStatus($applyStatus)
    {
        $this->container['applyStatus'] = $applyStatus;

        return $this;
    }

    /**
     * Gets elecAccount
     *
     * @return string
     */
    public function getElecAccount()
    {
        return $this->container['elecAccount'];
    }

    /**
     * Sets elecAccount
     *
     * @param string $elecAccount 银行电子账号
     *
     * @return $this
     */
    public function setElecAccount($elecAccount)
    {
        $this->container['elecAccount'] = $elecAccount;

        return $this;
    }

    /**
     * Gets bankAccountLevel
     *
     * @return string
     */
    public function getBankAccountLevel()
    {
        return $this->container['bankAccountLevel'];
    }

    /**
     * Sets bankAccountLevel
     *
     * @param string $bankAccountLevel 银行账户的等级<br>可选项如下:<br>ONEACCOUNT:一类户<br>TWOACCOUNT:二类户<br>THREEACCOUNT:三类户
     *
     * @return $this
     */
    public function setBankAccountLevel($bankAccountLevel)
    {
        $this->container['bankAccountLevel'] = $bankAccountLevel;

        return $this;
    }

    /**
     * Gets accountType
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     *
     * @param string $accountType 银行编码
     *
     * @return $this
     */
    public function setAccountType($accountType)
    {
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets yeepayMemberNo
     *
     * @return string
     */
    public function getYeepayMemberNo()
    {
        return $this->container['yeepayMemberNo'];
    }

    /**
     * Sets yeepayMemberNo
     *
     * @param string $yeepayMemberNo 易宝会员编号
     *
     * @return $this
     */
    public function setYeepayMemberNo($yeepayMemberNo)
    {
        $this->container['yeepayMemberNo'] = $yeepayMemberNo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


