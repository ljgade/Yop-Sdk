<?php
/**
 * YopQueryMemberBalanceQuotaRespDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 会员钱包
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\MWallet\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * YopQueryMemberBalanceQuotaRespDTO Class Doc Comment
 *
 * @category Class
 * @description 请修改我
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class YopQueryMemberBalanceQuotaRespDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'YopQueryMemberBalanceQuotaRespDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'memberNo' => 'string',
        'availableQuota' => 'string',
        'memberCategory' => 'string',
        'limitQuota' => 'string',
        'usedQuota' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'memberNo' => null,
        'availableQuota' => null,
        'memberCategory' => null,
        'limitQuota' => null,
        'usedQuota' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'memberNo' => 'memberNo',
        'availableQuota' => 'availableQuota',
        'memberCategory' => 'memberCategory',
        'limitQuota' => 'limitQuota',
        'usedQuota' => 'usedQuota'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'memberNo' => 'setMemberNo',
        'availableQuota' => 'setAvailableQuota',
        'memberCategory' => 'setMemberCategory',
        'limitQuota' => 'setLimitQuota',
        'usedQuota' => 'setUsedQuota'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'memberNo' => 'getMemberNo',
        'availableQuota' => 'getAvailableQuota',
        'memberCategory' => 'getMemberCategory',
        'limitQuota' => 'getLimitQuota',
        'usedQuota' => 'getUsedQuota'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['memberNo'] = isset($data['memberNo']) ? $data['memberNo'] : null;
        $this->container['availableQuota'] = isset($data['availableQuota']) ? $data['availableQuota'] : null;
        $this->container['memberCategory'] = isset($data['memberCategory']) ? $data['memberCategory'] : null;
        $this->container['limitQuota'] = isset($data['limitQuota']) ? $data['limitQuota'] : null;
        $this->container['usedQuota'] = isset($data['usedQuota']) ? $data['usedQuota'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code <p>返回码</p> <p>调用结果处理成功时该字段为空</p> <p>失败时见异常码对应表</p>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message <p>返回消息<br />返回码的详细说明</p>
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets memberNo
     *
     * @return string
     */
    public function getMemberNo()
    {
        return $this->container['memberNo'];
    }

    /**
     * Sets memberNo
     *
     * @param string $memberNo <p>易宝会员编号</p>
     *
     * @return $this
     */
    public function setMemberNo($memberNo)
    {
        $this->container['memberNo'] = $memberNo;

        return $this;
    }

    /**
     * Gets availableQuota
     *
     * @return string
     */
    public function getAvailableQuota()
    {
        return $this->container['availableQuota'];
    }

    /**
     * Sets availableQuota
     *
     * @param string $availableQuota <p>可用余额支付额度</p> <p>精确至两位小数&nbsp;</p>
     *
     * @return $this
     */
    public function setAvailableQuota($availableQuota)
    {
        $this->container['availableQuota'] = $availableQuota;

        return $this;
    }

    /**
     * Gets memberCategory
     *
     * @return string
     */
    public function getMemberCategory()
    {
        return $this->container['memberCategory'];
    }

    /**
     * Sets memberCategory
     *
     * @param string $memberCategory <div data-page-id=\"PAIVdmdabo9DDcxbHUWcsiHvn7b\" data-docx-has-block-data=\"false\"> <div class=\"ace-line ace-line old-record-id-SwCmda0owoqO0yxcH3icZwsvnCc\">钱包账户等级</div> <div class=\"ace-line ace-line old-record-id-SwCmda0owoqO0yxcH3icZwsvnCc\">可选项如下:</div> <div class=\"ace-line ace-line old-record-id-SwCmda0owoqO0yxcH3icZwsvnCc\">ONE_CATEGORY:一类</div> <div class=\"ace-line ace-line old-record-id-SwCmda0owoqO0yxcH3icZwsvnCc\">TWO_CATEGORY:二类</div> <div class=\"ace-line ace-line old-record-id-SwCmda0owoqO0yxcH3icZwsvnCc\">THREE_CATEGORY:三类</div> </div>
     *
     * @return $this
     */
    public function setMemberCategory($memberCategory)
    {
        $this->container['memberCategory'] = $memberCategory;

        return $this;
    }

    /**
     * Gets limitQuota
     *
     * @return string
     */
    public function getLimitQuota()
    {
        return $this->container['limitQuota'];
    }

    /**
     * Sets limitQuota
     *
     * @param string $limitQuota <p>余额支付总额度</p> <p>精确至两位小数&nbsp;</p>
     *
     * @return $this
     */
    public function setLimitQuota($limitQuota)
    {
        $this->container['limitQuota'] = $limitQuota;

        return $this;
    }

    /**
     * Gets usedQuota
     *
     * @return string
     */
    public function getUsedQuota()
    {
        return $this->container['usedQuota'];
    }

    /**
     * Sets usedQuota
     *
     * @param string $usedQuota <p>已使用的余额支付额度</p> <p>精确至两位小数</p>
     *
     * @return $this
     */
    public function setUsedQuota($usedQuota)
    {
        $this->container['usedQuota'] = $usedQuota;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


