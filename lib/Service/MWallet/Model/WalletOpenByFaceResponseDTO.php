<?php
/**
 * WalletOpenByFaceResponseDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 会员钱包
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\MWallet\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * WalletOpenByFaceResponseDTO Class Doc Comment
 *
 * @category Class
 * @description 请修改我
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WalletOpenByFaceResponseDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WalletOpenByFaceResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'businessNo' => 'string',
        'walletUserNo' => 'string',
        'walletCategory' => 'string',
        'needVerifyFace' => 'bool',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'businessNo' => null,
        'walletUserNo' => null,
        'walletCategory' => 'enum',
        'needVerifyFace' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'businessNo' => 'businessNo',
        'walletUserNo' => 'walletUserNo',
        'walletCategory' => 'walletCategory',
        'needVerifyFace' => 'needVerifyFace',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'businessNo' => 'setBusinessNo',
        'walletUserNo' => 'setWalletUserNo',
        'walletCategory' => 'setWalletCategory',
        'needVerifyFace' => 'setNeedVerifyFace',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'businessNo' => 'getBusinessNo',
        'walletUserNo' => 'getWalletUserNo',
        'walletCategory' => 'getWalletCategory',
        'needVerifyFace' => 'getNeedVerifyFace',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WALLET_CATEGORY_ONE_CATEGORY = 'ONE_CATEGORY';
    const WALLET_CATEGORY_TWO_CATEGORY = 'TWO_CATEGORY';
    const WALLET_CATEGORY_THREE_CATEGORY = 'THREE_CATEGORY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWalletCategoryAllowableValues()
    {
        return [
            self::WALLET_CATEGORY_ONE_CATEGORY,
            self::WALLET_CATEGORY_TWO_CATEGORY,
            self::WALLET_CATEGORY_THREE_CATEGORY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['businessNo'] = isset($data['businessNo']) ? $data['businessNo'] : null;
        $this->container['walletUserNo'] = isset($data['walletUserNo']) ? $data['walletUserNo'] : null;
        $this->container['walletCategory'] = isset($data['walletCategory']) ? $data['walletCategory'] : null;
        $this->container['needVerifyFace'] = isset($data['needVerifyFace']) ? $data['needVerifyFace'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWalletCategoryAllowableValues();
        if (!is_null($this->container['walletCategory']) && !in_array($this->container['walletCategory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'walletCategory', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code <p>返回码</p>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message <p>返回消息<br />返回码的详细说明</p>
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets businessNo
     *
     * @return string
     */
    public function getBusinessNo()
    {
        return $this->container['businessNo'];
    }

    /**
     * Sets businessNo
     *
     * @param string $businessNo <p>易宝订单号<br />易宝生成的唯一订单号</p>
     *
     * @return $this
     */
    public function setBusinessNo($businessNo)
    {
        $this->container['businessNo'] = $businessNo;

        return $this;
    }

    /**
     * Gets walletUserNo
     *
     * @return string
     */
    public function getWalletUserNo()
    {
        return $this->container['walletUserNo'];
    }

    /**
     * Sets walletUserNo
     *
     * @param string $walletUserNo <p>钱包账户ID<br />已开立成功的会员则返回同一钱包账户ID。用户在易宝钱包生成的唯一编号</p>
     *
     * @return $this
     */
    public function setWalletUserNo($walletUserNo)
    {
        $this->container['walletUserNo'] = $walletUserNo;

        return $this;
    }

    /**
     * Gets walletCategory
     *
     * @return string
     */
    public function getWalletCategory()
    {
        return $this->container['walletCategory'];
    }

    /**
     * Sets walletCategory
     *
     * @param string $walletCategory <p>钱包账户等级</p> 可选项如下: ONE_CATEGORY:一类 TWO_CATEGORY:二类 THREE_CATEGORY:三类
     *
     * @return $this
     */
    public function setWalletCategory($walletCategory)
    {
        $allowedValues = $this->getWalletCategoryAllowableValues();
        if (!is_null($walletCategory) && !in_array($walletCategory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'walletCategory', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['walletCategory'] = $walletCategory;

        return $this;
    }

    /**
     * Gets needVerifyFace
     *
     * @return bool
     */
    public function getNeedVerifyFace()
    {
        return $this->container['needVerifyFace'];
    }

    /**
     * Sets needVerifyFace
     *
     * @param bool $needVerifyFace <p>是否需要人脸识别</p>
     *
     * @return $this
     */
    public function setNeedVerifyFace($needVerifyFace)
    {
        $this->container['needVerifyFace'] = $needVerifyFace;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url <p>人脸识别注册页面地址</p>
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


