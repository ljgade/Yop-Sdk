<?php
/**
 * BankAccountTradeDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 会员钱包
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\MWallet\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * BankAccountTradeDTO Class Doc Comment
 *
 * @category Class
 * @description 交易对象
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankAccountTradeDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankAccountTradeDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trxDate' => 'string',
        'trxTime' => 'string',
        'loanFlag' => 'string',
        'transAmount' => 'string',
        'balance' => 'string',
        'otherAccNo' => 'string',
        'otherAccountName' => 'string',
        'tranNo' => 'string',
        'channel' => 'string',
        'tradeDetail' => 'string',
        'memo' => 'string',
        'tranaccreason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'trxDate' => null,
        'trxTime' => null,
        'loanFlag' => null,
        'transAmount' => null,
        'balance' => null,
        'otherAccNo' => null,
        'otherAccountName' => null,
        'tranNo' => null,
        'channel' => null,
        'tradeDetail' => null,
        'memo' => null,
        'tranaccreason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trxDate' => 'trxDate',
        'trxTime' => 'trxTime',
        'loanFlag' => 'loanFlag',
        'transAmount' => 'transAmount',
        'balance' => 'balance',
        'otherAccNo' => 'otherAccNo',
        'otherAccountName' => 'otherAccountName',
        'tranNo' => 'tranNo',
        'channel' => 'channel',
        'tradeDetail' => 'tradeDetail',
        'memo' => 'memo',
        'tranaccreason' => 'tranaccreason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trxDate' => 'setTrxDate',
        'trxTime' => 'setTrxTime',
        'loanFlag' => 'setLoanFlag',
        'transAmount' => 'setTransAmount',
        'balance' => 'setBalance',
        'otherAccNo' => 'setOtherAccNo',
        'otherAccountName' => 'setOtherAccountName',
        'tranNo' => 'setTranNo',
        'channel' => 'setChannel',
        'tradeDetail' => 'setTradeDetail',
        'memo' => 'setMemo',
        'tranaccreason' => 'setTranaccreason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trxDate' => 'getTrxDate',
        'trxTime' => 'getTrxTime',
        'loanFlag' => 'getLoanFlag',
        'transAmount' => 'getTransAmount',
        'balance' => 'getBalance',
        'otherAccNo' => 'getOtherAccNo',
        'otherAccountName' => 'getOtherAccountName',
        'tranNo' => 'getTranNo',
        'channel' => 'getChannel',
        'tradeDetail' => 'getTradeDetail',
        'memo' => 'getMemo',
        'tranaccreason' => 'getTranaccreason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trxDate'] = isset($data['trxDate']) ? $data['trxDate'] : null;
        $this->container['trxTime'] = isset($data['trxTime']) ? $data['trxTime'] : null;
        $this->container['loanFlag'] = isset($data['loanFlag']) ? $data['loanFlag'] : null;
        $this->container['transAmount'] = isset($data['transAmount']) ? $data['transAmount'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['otherAccNo'] = isset($data['otherAccNo']) ? $data['otherAccNo'] : null;
        $this->container['otherAccountName'] = isset($data['otherAccountName']) ? $data['otherAccountName'] : null;
        $this->container['tranNo'] = isset($data['tranNo']) ? $data['tranNo'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['tradeDetail'] = isset($data['tradeDetail']) ? $data['tradeDetail'] : null;
        $this->container['memo'] = isset($data['memo']) ? $data['memo'] : null;
        $this->container['tranaccreason'] = isset($data['tranaccreason']) ? $data['tranaccreason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trxDate
     *
     * @return string
     */
    public function getTrxDate()
    {
        return $this->container['trxDate'];
    }

    /**
     * Sets trxDate
     *
     * @param string $trxDate 交易日期
     *
     * @return $this
     */
    public function setTrxDate($trxDate)
    {
        $this->container['trxDate'] = $trxDate;

        return $this;
    }

    /**
     * Gets trxTime
     *
     * @return string
     */
    public function getTrxTime()
    {
        return $this->container['trxTime'];
    }

    /**
     * Sets trxTime
     *
     * @param string $trxTime 交易时间
     *
     * @return $this
     */
    public function setTrxTime($trxTime)
    {
        $this->container['trxTime'] = $trxTime;

        return $this;
    }

    /**
     * Gets loanFlag
     *
     * @return string
     */
    public function getLoanFlag()
    {
        return $this->container['loanFlag'];
    }

    /**
     * Sets loanFlag
     *
     * @param string $loanFlag 借贷标志<br>可选项如下:<br>INCOME:收入<br>PAY:支出
     *
     * @return $this
     */
    public function setLoanFlag($loanFlag)
    {
        $this->container['loanFlag'] = $loanFlag;

        return $this;
    }

    /**
     * Gets transAmount
     *
     * @return string
     */
    public function getTransAmount()
    {
        return $this->container['transAmount'];
    }

    /**
     * Sets transAmount
     *
     * @param string $transAmount 交易金额
     *
     * @return $this
     */
    public function setTransAmount($transAmount)
    {
        $this->container['transAmount'] = $transAmount;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return string
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param string $balance 账户余额
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets otherAccNo
     *
     * @return string
     */
    public function getOtherAccNo()
    {
        return $this->container['otherAccNo'];
    }

    /**
     * Sets otherAccNo
     *
     * @param string $otherAccNo 对方卡/折号
     *
     * @return $this
     */
    public function setOtherAccNo($otherAccNo)
    {
        $this->container['otherAccNo'] = $otherAccNo;

        return $this;
    }

    /**
     * Gets otherAccountName
     *
     * @return string
     */
    public function getOtherAccountName()
    {
        return $this->container['otherAccountName'];
    }

    /**
     * Sets otherAccountName
     *
     * @param string $otherAccountName 对方账户名称
     *
     * @return $this
     */
    public function setOtherAccountName($otherAccountName)
    {
        $this->container['otherAccountName'] = $otherAccountName;

        return $this;
    }

    /**
     * Gets tranNo
     *
     * @return string
     */
    public function getTranNo()
    {
        return $this->container['tranNo'];
    }

    /**
     * Sets tranNo
     *
     * @param string $tranNo 交易流水号
     *
     * @return $this
     */
    public function setTranNo($tranNo)
    {
        $this->container['tranNo'] = $tranNo;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel 发起方渠道
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets tradeDetail
     *
     * @return string
     */
    public function getTradeDetail()
    {
        return $this->container['tradeDetail'];
    }

    /**
     * Sets tradeDetail
     *
     * @param string $tradeDetail 交易详情
     *
     * @return $this
     */
    public function setTradeDetail($tradeDetail)
    {
        $this->container['tradeDetail'] = $tradeDetail;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string $memo 摘要
     *
     * @return $this
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets tranaccreason
     *
     * @return string
     */
    public function getTranaccreason()
    {
        return $this->container['tranaccreason'];
    }

    /**
     * Sets tranaccreason
     *
     * @param string $tranaccreason 转账原因
     *
     * @return $this
     */
    public function setTranaccreason($tranaccreason)
    {
        $this->container['tranaccreason'] = $tranaccreason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


