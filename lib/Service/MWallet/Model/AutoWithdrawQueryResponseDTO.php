<?php
/**
 * AutoWithdrawQueryResponseDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 会员钱包
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\MWallet\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * AutoWithdrawQueryResponseDTO Class Doc Comment
 *
 * @category Class
 * @description 自动提现订单查询返回结果
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AutoWithdrawQueryResponseDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AutoWithdrawQueryResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'businessNo' => 'string',
        'withdrawAmount' => 'string',
        'deductionAmount' => 'string',
        'arrivalAmount' => 'string',
        'orderStatus' => 'string',
        'completeTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'businessNo' => null,
        'withdrawAmount' => null,
        'deductionAmount' => null,
        'arrivalAmount' => null,
        'orderStatus' => null,
        'completeTime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'businessNo' => 'businessNo',
        'withdrawAmount' => 'withdrawAmount',
        'deductionAmount' => 'deductionAmount',
        'arrivalAmount' => 'arrivalAmount',
        'orderStatus' => 'orderStatus',
        'completeTime' => 'completeTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'businessNo' => 'setBusinessNo',
        'withdrawAmount' => 'setWithdrawAmount',
        'deductionAmount' => 'setDeductionAmount',
        'arrivalAmount' => 'setArrivalAmount',
        'orderStatus' => 'setOrderStatus',
        'completeTime' => 'setCompleteTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'businessNo' => 'getBusinessNo',
        'withdrawAmount' => 'getWithdrawAmount',
        'deductionAmount' => 'getDeductionAmount',
        'arrivalAmount' => 'getArrivalAmount',
        'orderStatus' => 'getOrderStatus',
        'completeTime' => 'getCompleteTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['businessNo'] = isset($data['businessNo']) ? $data['businessNo'] : null;
        $this->container['withdrawAmount'] = isset($data['withdrawAmount']) ? $data['withdrawAmount'] : null;
        $this->container['deductionAmount'] = isset($data['deductionAmount']) ? $data['deductionAmount'] : null;
        $this->container['arrivalAmount'] = isset($data['arrivalAmount']) ? $data['arrivalAmount'] : null;
        $this->container['orderStatus'] = isset($data['orderStatus']) ? $data['orderStatus'] : null;
        $this->container['completeTime'] = isset($data['completeTime']) ? $data['completeTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code <p>返回码，成功时为空</p>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message <p>返回异常错误描述</p>
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets businessNo
     *
     * @return string
     */
    public function getBusinessNo()
    {
        return $this->container['businessNo'];
    }

    /**
     * Sets businessNo
     *
     * @param string $businessNo <p>易宝业务订单号</p>
     *
     * @return $this
     */
    public function setBusinessNo($businessNo)
    {
        $this->container['businessNo'] = $businessNo;

        return $this;
    }

    /**
     * Gets withdrawAmount
     *
     * @return string
     */
    public function getWithdrawAmount()
    {
        return $this->container['withdrawAmount'];
    }

    /**
     * Sets withdrawAmount
     *
     * @param string $withdrawAmount <p>提现金额</p>
     *
     * @return $this
     */
    public function setWithdrawAmount($withdrawAmount)
    {
        $this->container['withdrawAmount'] = $withdrawAmount;

        return $this;
    }

    /**
     * Gets deductionAmount
     *
     * @return string
     */
    public function getDeductionAmount()
    {
        return $this->container['deductionAmount'];
    }

    /**
     * Sets deductionAmount
     *
     * @param string $deductionAmount <p>扣账金额</p>
     *
     * @return $this
     */
    public function setDeductionAmount($deductionAmount)
    {
        $this->container['deductionAmount'] = $deductionAmount;

        return $this;
    }

    /**
     * Gets arrivalAmount
     *
     * @return string
     */
    public function getArrivalAmount()
    {
        return $this->container['arrivalAmount'];
    }

    /**
     * Sets arrivalAmount
     *
     * @param string $arrivalAmount <p>到账金额</p>
     *
     * @return $this
     */
    public function setArrivalAmount($arrivalAmount)
    {
        $this->container['arrivalAmount'] = $arrivalAmount;

        return $this;
    }

    /**
     * Gets orderStatus
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['orderStatus'];
    }

    /**
     * Sets orderStatus
     *
     * @param string $orderStatus <p>订单状态</p> <p><em>PROCESS：请求处理中</em></p> <div data-page-id=\"LSY6dVw3GoT6SxxbUcpc11nyn6d\" data-docx-has-block-data=\"false\"> <div class=\"ace-line ace-line old-record-id-Z860daOuIoEgCwxwt8gcGYF3nYg\"><em>FAIL：处理失败</em></div> <div class=\"ace-line ace-line old-record-id-U888dy2q4oOC0uxAPotcwG9Enje\"><em>SUCCESS：处理成功</em></div> </div>
     *
     * @return $this
     */
    public function setOrderStatus($orderStatus)
    {
        $this->container['orderStatus'] = $orderStatus;

        return $this;
    }

    /**
     * Gets completeTime
     *
     * @return string
     */
    public function getCompleteTime()
    {
        return $this->container['completeTime'];
    }

    /**
     * Sets completeTime
     *
     * @param string $completeTime <p>提现完成时间</p>
     *
     * @return $this
     */
    public function setCompleteTime($completeTime)
    {
        $this->container['completeTime'] = $completeTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


