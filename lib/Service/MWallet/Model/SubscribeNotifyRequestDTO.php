<?php
/**
 * SubscribeNotifyRequestDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 会员钱包
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\MWallet\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * SubscribeNotifyRequestDTO Class Doc Comment
 *
 * @category Class
 * @description 会员通知参数
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscribeNotifyRequestDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscribeNotifyRequestDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchantNo' => 'string',
        'requestNo' => 'string',
        'notifyUrl' => 'string',
        'memberList' => '\Yeepay\Yop\Sdk\Service\MWallet\Model\MemberSubscribeNotifyInfo[]',
        'notifyType' => 'string',
        'operateTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchantNo' => null,
        'requestNo' => null,
        'notifyUrl' => null,
        'memberList' => null,
        'notifyType' => 'enum',
        'operateTime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantNo' => 'merchantNo',
        'requestNo' => 'requestNo',
        'notifyUrl' => 'notifyUrl',
        'memberList' => 'memberList',
        'notifyType' => 'notifyType',
        'operateTime' => 'operateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantNo' => 'setMerchantNo',
        'requestNo' => 'setRequestNo',
        'notifyUrl' => 'setNotifyUrl',
        'memberList' => 'setMemberList',
        'notifyType' => 'setNotifyType',
        'operateTime' => 'setOperateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantNo' => 'getMerchantNo',
        'requestNo' => 'getRequestNo',
        'notifyUrl' => 'getNotifyUrl',
        'memberList' => 'getMemberList',
        'notifyType' => 'getNotifyType',
        'operateTime' => 'getOperateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NOTIFY_TYPE_ENABLE = 'ENABLE';
    const NOTIFY_TYPE_EXPIRE = 'EXPIRE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNotifyTypeAllowableValues()
    {
        return [
            self::NOTIFY_TYPE_ENABLE,
            self::NOTIFY_TYPE_EXPIRE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['notifyUrl'] = isset($data['notifyUrl']) ? $data['notifyUrl'] : null;
        $this->container['memberList'] = isset($data['memberList']) ? $data['memberList'] : null;
        $this->container['notifyType'] = isset($data['notifyType']) ? $data['notifyType'] : null;
        $this->container['operateTime'] = isset($data['operateTime']) ? $data['operateTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchantNo'] === null) {
            $invalidProperties[] = "'merchantNo' can't be null";
        }
        if ($this->container['requestNo'] === null) {
            $invalidProperties[] = "'requestNo' can't be null";
        }
        if ($this->container['memberList'] === null) {
            $invalidProperties[] = "'memberList' can't be null";
        }
        if ($this->container['notifyType'] === null) {
            $invalidProperties[] = "'notifyType' can't be null";
        }
        $allowedValues = $this->getNotifyTypeAllowableValues();
        if (!is_null($this->container['notifyType']) && !in_array($this->container['notifyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'notifyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['operateTime'] === null) {
            $invalidProperties[] = "'operateTime' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo <p>商户编号（通知会员的归属商编）</p>
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo <p>商户请求号</p>
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets notifyUrl
     *
     * @return string
     */
    public function getNotifyUrl()
    {
        return $this->container['notifyUrl'];
    }

    /**
     * Sets notifyUrl
     *
     * @param string $notifyUrl <p>通知商户地址</p>
     *
     * @return $this
     */
    public function setNotifyUrl($notifyUrl)
    {
        $this->container['notifyUrl'] = $notifyUrl;

        return $this;
    }

    /**
     * Gets memberList
     *
     * @return \Yeepay\Yop\Sdk\Service\MWallet\Model\MemberSubscribeNotifyInfo[]
     */
    public function getMemberList()
    {
        return $this->container['memberList'];
    }

    /**
     * Sets memberList
     *
     * @param \Yeepay\Yop\Sdk\Service\MWallet\Model\MemberSubscribeNotifyInfo[] $memberList <p>会员列表</p>
     *
     * @return $this
     */
    public function setMemberList($memberList)
    {
        $this->container['memberList'] = $memberList;

        return $this;
    }

    /**
     * Gets notifyType
     *
     * @return string
     */
    public function getNotifyType()
    {
        return $this->container['notifyType'];
    }

    /**
     * Sets notifyType
     *
     * @param string $notifyType <p>变更通知类型</p> 可选项如下: ENABLE:会员续期有效 EXPIRE:会员订阅到期
     *
     * @return $this
     */
    public function setNotifyType($notifyType)
    {
        $allowedValues = $this->getNotifyTypeAllowableValues();
        if (!in_array($notifyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'notifyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['notifyType'] = $notifyType;

        return $this;
    }

    /**
     * Gets operateTime
     *
     * @return string
     */
    public function getOperateTime()
    {
        return $this->container['operateTime'];
    }

    /**
     * Sets operateTime
     *
     * @param string $operateTime <p>变更时间</p>
     *
     * @return $this
     */
    public function setOperateTime($operateTime)
    {
        $this->container['operateTime'] = $operateTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


