<?php
/**
 * OrderQueryYopQueryOrderResDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 标准交易
 *
 * <p>名称（中文）：新交易下单接口<br />名称（英文，xx.war）：opr-hessian.war<br />简介：合单支付下单与标准收款内部下单接口合并<br />wiki文档地址：http://wiki.yeepay.com/pages/viewpage.action?pageId=122095805(4.新api分组相关接口规划)<br />预计项目上线时间：2020年6月9日<br />归属/拟申请的sp编码（可选）：opr<br />期望api分组编码、名称（可选）：trade(标准交易)<br />涉及的接口：申请下单、订单查询、申请退款、退款查询</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Trade\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * OrderQueryYopQueryOrderResDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderQueryYopQueryOrderResDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderQueryYopQueryOrderResDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'bizSystemNo' => 'string',
        'parentMerchantNo' => 'string',
        'merchantNo' => 'string',
        'orderId' => 'string',
        'uniqueOrderNo' => 'string',
        'status' => 'string',
        'orderAmount' => 'float',
        'payAmount' => 'float',
        'merchantFee' => 'float',
        'customerFee' => 'float',
        'paySuccessDate' => 'string',
        'memo' => 'string',
        'payWay' => 'string',
        'token' => 'string',
        'fundProcessType' => 'string',
        'bankOrderId' => 'string',
        'channelOrderId' => 'string',
        'channel' => 'string',
        'realPayAmount' => 'float',
        'unSplitAmount' => 'float',
        'totalRefundAmount' => 'float',
        'payerInfo' => '\Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryPayerInfoResult',
        'channelPromotionInfo' => '\Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryChannelPromotionInfoDTOResult[]',
        'ypPromotionInfo' => '\Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryYpPromotionInfoDTOResult[]',
        'terminalInfo' => 'string',
        'installmentInfo' => '\Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryInstallmentInfoResult',
        'enterprisePayInfo' => '\Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryEnterprisePayInfoResult',
        'failReason' => 'string',
        'failCode' => 'string',
        'clearStatus' => 'string',
        'tradeType' => 'string',
        'preAuthStatus' => 'string',
        'preAuthAmount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'bizSystemNo' => null,
        'parentMerchantNo' => null,
        'merchantNo' => null,
        'orderId' => null,
        'uniqueOrderNo' => null,
        'status' => null,
        'orderAmount' => null,
        'payAmount' => null,
        'merchantFee' => null,
        'customerFee' => null,
        'paySuccessDate' => null,
        'memo' => null,
        'payWay' => null,
        'token' => null,
        'fundProcessType' => null,
        'bankOrderId' => null,
        'channelOrderId' => null,
        'channel' => null,
        'realPayAmount' => null,
        'unSplitAmount' => null,
        'totalRefundAmount' => null,
        'payerInfo' => null,
        'channelPromotionInfo' => null,
        'ypPromotionInfo' => null,
        'terminalInfo' => null,
        'installmentInfo' => null,
        'enterprisePayInfo' => null,
        'failReason' => null,
        'failCode' => null,
        'clearStatus' => null,
        'tradeType' => null,
        'preAuthStatus' => null,
        'preAuthAmount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'bizSystemNo' => 'bizSystemNo',
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantNo' => 'merchantNo',
        'orderId' => 'orderId',
        'uniqueOrderNo' => 'uniqueOrderNo',
        'status' => 'status',
        'orderAmount' => 'orderAmount',
        'payAmount' => 'payAmount',
        'merchantFee' => 'merchantFee',
        'customerFee' => 'customerFee',
        'paySuccessDate' => 'paySuccessDate',
        'memo' => 'memo',
        'payWay' => 'payWay',
        'token' => 'token',
        'fundProcessType' => 'fundProcessType',
        'bankOrderId' => 'bankOrderId',
        'channelOrderId' => 'channelOrderId',
        'channel' => 'channel',
        'realPayAmount' => 'realPayAmount',
        'unSplitAmount' => 'unSplitAmount',
        'totalRefundAmount' => 'totalRefundAmount',
        'payerInfo' => 'payerInfo',
        'channelPromotionInfo' => 'channelPromotionInfo',
        'ypPromotionInfo' => 'ypPromotionInfo',
        'terminalInfo' => 'terminalInfo',
        'installmentInfo' => 'installmentInfo',
        'enterprisePayInfo' => 'enterprisePayInfo',
        'failReason' => 'failReason',
        'failCode' => 'failCode',
        'clearStatus' => 'clearStatus',
        'tradeType' => 'tradeType',
        'preAuthStatus' => 'preAuthStatus',
        'preAuthAmount' => 'preAuthAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'bizSystemNo' => 'setBizSystemNo',
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'orderId' => 'setOrderId',
        'uniqueOrderNo' => 'setUniqueOrderNo',
        'status' => 'setStatus',
        'orderAmount' => 'setOrderAmount',
        'payAmount' => 'setPayAmount',
        'merchantFee' => 'setMerchantFee',
        'customerFee' => 'setCustomerFee',
        'paySuccessDate' => 'setPaySuccessDate',
        'memo' => 'setMemo',
        'payWay' => 'setPayWay',
        'token' => 'setToken',
        'fundProcessType' => 'setFundProcessType',
        'bankOrderId' => 'setBankOrderId',
        'channelOrderId' => 'setChannelOrderId',
        'channel' => 'setChannel',
        'realPayAmount' => 'setRealPayAmount',
        'unSplitAmount' => 'setUnSplitAmount',
        'totalRefundAmount' => 'setTotalRefundAmount',
        'payerInfo' => 'setPayerInfo',
        'channelPromotionInfo' => 'setChannelPromotionInfo',
        'ypPromotionInfo' => 'setYpPromotionInfo',
        'terminalInfo' => 'setTerminalInfo',
        'installmentInfo' => 'setInstallmentInfo',
        'enterprisePayInfo' => 'setEnterprisePayInfo',
        'failReason' => 'setFailReason',
        'failCode' => 'setFailCode',
        'clearStatus' => 'setClearStatus',
        'tradeType' => 'setTradeType',
        'preAuthStatus' => 'setPreAuthStatus',
        'preAuthAmount' => 'setPreAuthAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'bizSystemNo' => 'getBizSystemNo',
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'orderId' => 'getOrderId',
        'uniqueOrderNo' => 'getUniqueOrderNo',
        'status' => 'getStatus',
        'orderAmount' => 'getOrderAmount',
        'payAmount' => 'getPayAmount',
        'merchantFee' => 'getMerchantFee',
        'customerFee' => 'getCustomerFee',
        'paySuccessDate' => 'getPaySuccessDate',
        'memo' => 'getMemo',
        'payWay' => 'getPayWay',
        'token' => 'getToken',
        'fundProcessType' => 'getFundProcessType',
        'bankOrderId' => 'getBankOrderId',
        'channelOrderId' => 'getChannelOrderId',
        'channel' => 'getChannel',
        'realPayAmount' => 'getRealPayAmount',
        'unSplitAmount' => 'getUnSplitAmount',
        'totalRefundAmount' => 'getTotalRefundAmount',
        'payerInfo' => 'getPayerInfo',
        'channelPromotionInfo' => 'getChannelPromotionInfo',
        'ypPromotionInfo' => 'getYpPromotionInfo',
        'terminalInfo' => 'getTerminalInfo',
        'installmentInfo' => 'getInstallmentInfo',
        'enterprisePayInfo' => 'getEnterprisePayInfo',
        'failReason' => 'getFailReason',
        'failCode' => 'getFailCode',
        'clearStatus' => 'getClearStatus',
        'tradeType' => 'getTradeType',
        'preAuthStatus' => 'getPreAuthStatus',
        'preAuthAmount' => 'getPreAuthAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['bizSystemNo'] = isset($data['bizSystemNo']) ? $data['bizSystemNo'] : null;
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['uniqueOrderNo'] = isset($data['uniqueOrderNo']) ? $data['uniqueOrderNo'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['orderAmount'] = isset($data['orderAmount']) ? $data['orderAmount'] : null;
        $this->container['payAmount'] = isset($data['payAmount']) ? $data['payAmount'] : null;
        $this->container['merchantFee'] = isset($data['merchantFee']) ? $data['merchantFee'] : null;
        $this->container['customerFee'] = isset($data['customerFee']) ? $data['customerFee'] : null;
        $this->container['paySuccessDate'] = isset($data['paySuccessDate']) ? $data['paySuccessDate'] : null;
        $this->container['memo'] = isset($data['memo']) ? $data['memo'] : null;
        $this->container['payWay'] = isset($data['payWay']) ? $data['payWay'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['fundProcessType'] = isset($data['fundProcessType']) ? $data['fundProcessType'] : null;
        $this->container['bankOrderId'] = isset($data['bankOrderId']) ? $data['bankOrderId'] : null;
        $this->container['channelOrderId'] = isset($data['channelOrderId']) ? $data['channelOrderId'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['realPayAmount'] = isset($data['realPayAmount']) ? $data['realPayAmount'] : null;
        $this->container['unSplitAmount'] = isset($data['unSplitAmount']) ? $data['unSplitAmount'] : null;
        $this->container['totalRefundAmount'] = isset($data['totalRefundAmount']) ? $data['totalRefundAmount'] : null;
        $this->container['payerInfo'] = isset($data['payerInfo']) ? $data['payerInfo'] : null;
        $this->container['channelPromotionInfo'] = isset($data['channelPromotionInfo']) ? $data['channelPromotionInfo'] : null;
        $this->container['ypPromotionInfo'] = isset($data['ypPromotionInfo']) ? $data['ypPromotionInfo'] : null;
        $this->container['terminalInfo'] = isset($data['terminalInfo']) ? $data['terminalInfo'] : null;
        $this->container['installmentInfo'] = isset($data['installmentInfo']) ? $data['installmentInfo'] : null;
        $this->container['enterprisePayInfo'] = isset($data['enterprisePayInfo']) ? $data['enterprisePayInfo'] : null;
        $this->container['failReason'] = isset($data['failReason']) ? $data['failReason'] : null;
        $this->container['failCode'] = isset($data['failCode']) ? $data['failCode'] : null;
        $this->container['clearStatus'] = isset($data['clearStatus']) ? $data['clearStatus'] : null;
        $this->container['tradeType'] = isset($data['tradeType']) ? $data['tradeType'] : null;
        $this->container['preAuthStatus'] = isset($data['preAuthStatus']) ? $data['preAuthStatus'] : null;
        $this->container['preAuthAmount'] = isset($data['preAuthAmount']) ? $data['preAuthAmount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code 返回码
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message 返回信息
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets bizSystemNo
     *
     * @return string
     */
    public function getBizSystemNo()
    {
        return $this->container['bizSystemNo'];
    }

    /**
     * Sets bizSystemNo
     *
     * @param string $bizSystemNo 未命名
     *
     * @return $this
     */
    public function setBizSystemNo($bizSystemNo)
    {
        $this->container['bizSystemNo'] = $bizSystemNo;

        return $this;
    }

    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo 发起方商编
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo 商户编号
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId 商户收款请求号
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets uniqueOrderNo
     *
     * @return string
     */
    public function getUniqueOrderNo()
    {
        return $this->container['uniqueOrderNo'];
    }

    /**
     * Sets uniqueOrderNo
     *
     * @param string $uniqueOrderNo 易宝收款订单号
     *
     * @return $this
     */
    public function setUniqueOrderNo($uniqueOrderNo)
    {
        $this->container['uniqueOrderNo'] = $uniqueOrderNo;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 订单状态
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets orderAmount
     *
     * @return float
     */
    public function getOrderAmount()
    {
        return $this->container['orderAmount'];
    }

    /**
     * Sets orderAmount
     *
     * @param float $orderAmount 订单金额
     *
     * @return $this
     */
    public function setOrderAmount($orderAmount)
    {
        $this->container['orderAmount'] = $orderAmount;

        return $this;
    }

    /**
     * Gets payAmount
     *
     * @return float
     */
    public function getPayAmount()
    {
        return $this->container['payAmount'];
    }

    /**
     * Sets payAmount
     *
     * @param float $payAmount 支付金额
     *
     * @return $this
     */
    public function setPayAmount($payAmount)
    {
        $this->container['payAmount'] = $payAmount;

        return $this;
    }

    /**
     * Gets merchantFee
     *
     * @return float
     */
    public function getMerchantFee()
    {
        return $this->container['merchantFee'];
    }

    /**
     * Sets merchantFee
     *
     * @param float $merchantFee 商户手续费
     *
     * @return $this
     */
    public function setMerchantFee($merchantFee)
    {
        $this->container['merchantFee'] = $merchantFee;

        return $this;
    }

    /**
     * Gets customerFee
     *
     * @return float
     */
    public function getCustomerFee()
    {
        return $this->container['customerFee'];
    }

    /**
     * Sets customerFee
     *
     * @param float $customerFee 用户手续费
     *
     * @return $this
     */
    public function setCustomerFee($customerFee)
    {
        $this->container['customerFee'] = $customerFee;

        return $this;
    }

    /**
     * Gets paySuccessDate
     *
     * @return string
     */
    public function getPaySuccessDate()
    {
        return $this->container['paySuccessDate'];
    }

    /**
     * Sets paySuccessDate
     *
     * @param string $paySuccessDate 支付成功时间
     *
     * @return $this
     */
    public function setPaySuccessDate($paySuccessDate)
    {
        $this->container['paySuccessDate'] = $paySuccessDate;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string $memo 对账备注
     *
     * @return $this
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets payWay
     *
     * @return string
     */
    public function getPayWay()
    {
        return $this->container['payWay'];
    }

    /**
     * Sets payWay
     *
     * @param string $payWay 支付方式
     *
     * @return $this
     */
    public function setPayWay($payWay)
    {
        $this->container['payWay'] = $payWay;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets fundProcessType
     *
     * @return string
     */
    public function getFundProcessType()
    {
        return $this->container['fundProcessType'];
    }

    /**
     * Sets fundProcessType
     *
     * @param string $fundProcessType 分账都订单标识
     *
     * @return $this
     */
    public function setFundProcessType($fundProcessType)
    {
        $this->container['fundProcessType'] = $fundProcessType;

        return $this;
    }

    /**
     * Gets bankOrderId
     *
     * @return string
     */
    public function getBankOrderId()
    {
        return $this->container['bankOrderId'];
    }

    /**
     * Sets bankOrderId
     *
     * @param string $bankOrderId 银行订单号
     *
     * @return $this
     */
    public function setBankOrderId($bankOrderId)
    {
        $this->container['bankOrderId'] = $bankOrderId;

        return $this;
    }

    /**
     * Gets channelOrderId
     *
     * @return string
     */
    public function getChannelOrderId()
    {
        return $this->container['channelOrderId'];
    }

    /**
     * Sets channelOrderId
     *
     * @param string $channelOrderId 渠道订单号
     *
     * @return $this
     */
    public function setChannelOrderId($channelOrderId)
    {
        $this->container['channelOrderId'] = $channelOrderId;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel 渠道类型
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets realPayAmount
     *
     * @return float
     */
    public function getRealPayAmount()
    {
        return $this->container['realPayAmount'];
    }

    /**
     * Sets realPayAmount
     *
     * @param float $realPayAmount 用户实际支付金额
     *
     * @return $this
     */
    public function setRealPayAmount($realPayAmount)
    {
        $this->container['realPayAmount'] = $realPayAmount;

        return $this;
    }

    /**
     * Gets unSplitAmount
     *
     * @return float
     */
    public function getUnSplitAmount()
    {
        return $this->container['unSplitAmount'];
    }

    /**
     * Sets unSplitAmount
     *
     * @param float $unSplitAmount 剩余可分账金额
     *
     * @return $this
     */
    public function setUnSplitAmount($unSplitAmount)
    {
        $this->container['unSplitAmount'] = $unSplitAmount;

        return $this;
    }

    /**
     * Gets totalRefundAmount
     *
     * @return float
     */
    public function getTotalRefundAmount()
    {
        return $this->container['totalRefundAmount'];
    }

    /**
     * Sets totalRefundAmount
     *
     * @param float $totalRefundAmount 未命名
     *
     * @return $this
     */
    public function setTotalRefundAmount($totalRefundAmount)
    {
        $this->container['totalRefundAmount'] = $totalRefundAmount;

        return $this;
    }

    /**
     * Gets payerInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryPayerInfoResult
     */
    public function getPayerInfo()
    {
        return $this->container['payerInfo'];
    }

    /**
     * Sets payerInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryPayerInfoResult $payerInfo 付款信息
     *
     * @return $this
     */
    public function setPayerInfo($payerInfo)
    {
        $this->container['payerInfo'] = $payerInfo;

        return $this;
    }

    /**
     * Gets channelPromotionInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryChannelPromotionInfoDTOResult[]
     */
    public function getChannelPromotionInfo()
    {
        return $this->container['channelPromotionInfo'];
    }

    /**
     * Sets channelPromotionInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryChannelPromotionInfoDTOResult[] $channelPromotionInfo 渠道侧优惠列表
     *
     * @return $this
     */
    public function setChannelPromotionInfo($channelPromotionInfo)
    {
        $this->container['channelPromotionInfo'] = $channelPromotionInfo;

        return $this;
    }

    /**
     * Gets ypPromotionInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryYpPromotionInfoDTOResult[]
     */
    public function getYpPromotionInfo()
    {
        return $this->container['ypPromotionInfo'];
    }

    /**
     * Sets ypPromotionInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryYpPromotionInfoDTOResult[] $ypPromotionInfo 易宝优惠列表
     *
     * @return $this
     */
    public function setYpPromotionInfo($ypPromotionInfo)
    {
        $this->container['ypPromotionInfo'] = $ypPromotionInfo;

        return $this;
    }

    /**
     * Gets terminalInfo
     *
     * @return string
     */
    public function getTerminalInfo()
    {
        return $this->container['terminalInfo'];
    }

    /**
     * Sets terminalInfo
     *
     * @param string $terminalInfo 终端信息
     *
     * @return $this
     */
    public function setTerminalInfo($terminalInfo)
    {
        $this->container['terminalInfo'] = $terminalInfo;

        return $this;
    }

    /**
     * Gets installmentInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryInstallmentInfoResult
     */
    public function getInstallmentInfo()
    {
        return $this->container['installmentInfo'];
    }

    /**
     * Sets installmentInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryInstallmentInfoResult $installmentInfo 信用卡分期信息
     *
     * @return $this
     */
    public function setInstallmentInfo($installmentInfo)
    {
        $this->container['installmentInfo'] = $installmentInfo;

        return $this;
    }

    /**
     * Gets enterprisePayInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryEnterprisePayInfoResult
     */
    public function getEnterprisePayInfo()
    {
        return $this->container['enterprisePayInfo'];
    }

    /**
     * Sets enterprisePayInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Trade\Model\OrderQueryEnterprisePayInfoResult $enterprisePayInfo 未命名
     *
     * @return $this
     */
    public function setEnterprisePayInfo($enterprisePayInfo)
    {
        $this->container['enterprisePayInfo'] = $enterprisePayInfo;

        return $this;
    }

    /**
     * Gets failReason
     *
     * @return string
     */
    public function getFailReason()
    {
        return $this->container['failReason'];
    }

    /**
     * Sets failReason
     *
     * @param string $failReason 支付失败的失败原因
     *
     * @return $this
     */
    public function setFailReason($failReason)
    {
        $this->container['failReason'] = $failReason;

        return $this;
    }

    /**
     * Gets failCode
     *
     * @return string
     */
    public function getFailCode()
    {
        return $this->container['failCode'];
    }

    /**
     * Sets failCode
     *
     * @param string $failCode 支付失败的code码
     *
     * @return $this
     */
    public function setFailCode($failCode)
    {
        $this->container['failCode'] = $failCode;

        return $this;
    }

    /**
     * Gets clearStatus
     *
     * @return string
     */
    public function getClearStatus()
    {
        return $this->container['clearStatus'];
    }

    /**
     * Sets clearStatus
     *
     * @param string $clearStatus 清算状态
     *
     * @return $this
     */
    public function setClearStatus($clearStatus)
    {
        $this->container['clearStatus'] = $clearStatus;

        return $this;
    }

    /**
     * Gets tradeType
     *
     * @return string
     */
    public function getTradeType()
    {
        return $this->container['tradeType'];
    }

    /**
     * Sets tradeType
     *
     * @param string $tradeType 资金到账类型
     *
     * @return $this
     */
    public function setTradeType($tradeType)
    {
        $this->container['tradeType'] = $tradeType;

        return $this;
    }

    /**
     * Gets preAuthStatus
     *
     * @return string
     */
    public function getPreAuthStatus()
    {
        return $this->container['preAuthStatus'];
    }

    /**
     * Sets preAuthStatus
     *
     * @param string $preAuthStatus 预授权状态
     *
     * @return $this
     */
    public function setPreAuthStatus($preAuthStatus)
    {
        $this->container['preAuthStatus'] = $preAuthStatus;

        return $this;
    }

    /**
     * Gets preAuthAmount
     *
     * @return float
     */
    public function getPreAuthAmount()
    {
        return $this->container['preAuthAmount'];
    }

    /**
     * Sets preAuthAmount
     *
     * @param float $preAuthAmount 预授权金额
     *
     * @return $this
     */
    public function setPreAuthAmount($preAuthAmount)
    {
        $this->container['preAuthAmount'] = $preAuthAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


