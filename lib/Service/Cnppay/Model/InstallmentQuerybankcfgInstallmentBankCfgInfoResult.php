<?php
/**
 * InstallmentQuerybankcfgInstallmentBankCfgInfoResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 无卡交易系统
 *
 * <p>中台的无卡交易系统(Card Not Present)，包含调用统一订单OPR下单及无卡支付服务NCPAY支付的流程</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Cnppay\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * InstallmentQuerybankcfgInstallmentBankCfgInfoResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstallmentQuerybankcfgInstallmentBankCfgInfoResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstallmentQuerybankcfgInstallmentBankCfgInfoResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'numOfInstallment' => 'int',
        'bankId' => 'string',
        'maxQuota' => 'float',
        'minQuota' => 'float',
        'subsidyInterestType' => 'string',
        'payerInterestRate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'numOfInstallment' => 'int32',
        'bankId' => null,
        'maxQuota' => null,
        'minQuota' => null,
        'subsidyInterestType' => null,
        'payerInterestRate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numOfInstallment' => 'numOfInstallment',
        'bankId' => 'bankId',
        'maxQuota' => 'maxQuota',
        'minQuota' => 'minQuota',
        'subsidyInterestType' => 'subsidyInterestType',
        'payerInterestRate' => 'payerInterestRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numOfInstallment' => 'setNumOfInstallment',
        'bankId' => 'setBankId',
        'maxQuota' => 'setMaxQuota',
        'minQuota' => 'setMinQuota',
        'subsidyInterestType' => 'setSubsidyInterestType',
        'payerInterestRate' => 'setPayerInterestRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numOfInstallment' => 'getNumOfInstallment',
        'bankId' => 'getBankId',
        'maxQuota' => 'getMaxQuota',
        'minQuota' => 'getMinQuota',
        'subsidyInterestType' => 'getSubsidyInterestType',
        'payerInterestRate' => 'getPayerInterestRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['numOfInstallment'] = isset($data['numOfInstallment']) ? $data['numOfInstallment'] : null;
        $this->container['bankId'] = isset($data['bankId']) ? $data['bankId'] : null;
        $this->container['maxQuota'] = isset($data['maxQuota']) ? $data['maxQuota'] : null;
        $this->container['minQuota'] = isset($data['minQuota']) ? $data['minQuota'] : null;
        $this->container['subsidyInterestType'] = isset($data['subsidyInterestType']) ? $data['subsidyInterestType'] : null;
        $this->container['payerInterestRate'] = isset($data['payerInterestRate']) ? $data['payerInterestRate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numOfInstallment
     *
     * @return int
     */
    public function getNumOfInstallment()
    {
        return $this->container['numOfInstallment'];
    }

    /**
     * Sets numOfInstallment
     *
     * @param int $numOfInstallment 银行分期数
     *
     * @return $this
     */
    public function setNumOfInstallment($numOfInstallment)
    {
        $this->container['numOfInstallment'] = $numOfInstallment;

        return $this;
    }

    /**
     * Gets bankId
     *
     * @return string
     */
    public function getBankId()
    {
        return $this->container['bankId'];
    }

    /**
     * Sets bankId
     *
     * @param string $bankId 银行编码
     *
     * @return $this
     */
    public function setBankId($bankId)
    {
        $this->container['bankId'] = $bankId;

        return $this;
    }

    /**
     * Gets maxQuota
     *
     * @return float
     */
    public function getMaxQuota()
    {
        return $this->container['maxQuota'];
    }

    /**
     * Sets maxQuota
     *
     * @param float $maxQuota 银行最高限额
     *
     * @return $this
     */
    public function setMaxQuota($maxQuota)
    {
        $this->container['maxQuota'] = $maxQuota;

        return $this;
    }

    /**
     * Gets minQuota
     *
     * @return float
     */
    public function getMinQuota()
    {
        return $this->container['minQuota'];
    }

    /**
     * Sets minQuota
     *
     * @param float $minQuota 银行最低限额
     *
     * @return $this
     */
    public function setMinQuota($minQuota)
    {
        $this->container['minQuota'] = $minQuota;

        return $this;
    }

    /**
     * Gets subsidyInterestType
     *
     * @return string
     */
    public function getSubsidyInterestType()
    {
        return $this->container['subsidyInterestType'];
    }

    /**
     * Sets subsidyInterestType
     *
     * @param string $subsidyInterestType 贴息类型
     *
     * @return $this
     */
    public function setSubsidyInterestType($subsidyInterestType)
    {
        $this->container['subsidyInterestType'] = $subsidyInterestType;

        return $this;
    }

    /**
     * Gets payerInterestRate
     *
     * @return string
     */
    public function getPayerInterestRate()
    {
        return $this->container['payerInterestRate'];
    }

    /**
     * Sets payerInterestRate
     *
     * @param string $payerInterestRate 持卡人利率
     *
     * @return $this
     */
    public function setPayerInterestRate($payerInterestRate)
    {
        $this->container['payerInterestRate'] = $payerInterestRate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


