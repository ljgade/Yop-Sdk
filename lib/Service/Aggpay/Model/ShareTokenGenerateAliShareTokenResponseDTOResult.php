<?php
/**
 * ShareTokenGenerateAliShareTokenResponseDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 聚合支付
 *
 * <p>提供聚合支付相关服务（支付下单、公众号配置等功能</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Aggpay\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * ShareTokenGenerateAliShareTokenResponseDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShareTokenGenerateAliShareTokenResponseDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShareTokenGenerateAliShareTokenResponseDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'parentMerchantNo' => 'string',
        'merchantNo' => 'string',
        'orderId' => 'string',
        'uniqueOrderNo' => 'string',
        'channelInfoList' => 'string',
        'shareToken' => 'string',
        'shareTokenExpiredTime' => 'string',
        'guideText1' => 'string',
        'guideText2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'parentMerchantNo' => null,
        'merchantNo' => null,
        'orderId' => null,
        'uniqueOrderNo' => null,
        'channelInfoList' => null,
        'shareToken' => null,
        'shareTokenExpiredTime' => 'date-time',
        'guideText1' => null,
        'guideText2' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantNo' => 'merchantNo',
        'orderId' => 'orderId',
        'uniqueOrderNo' => 'uniqueOrderNo',
        'channelInfoList' => 'channelInfoList',
        'shareToken' => 'shareToken',
        'shareTokenExpiredTime' => 'shareTokenExpiredTime',
        'guideText1' => 'guideText1',
        'guideText2' => 'guideText2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'orderId' => 'setOrderId',
        'uniqueOrderNo' => 'setUniqueOrderNo',
        'channelInfoList' => 'setChannelInfoList',
        'shareToken' => 'setShareToken',
        'shareTokenExpiredTime' => 'setShareTokenExpiredTime',
        'guideText1' => 'setGuideText1',
        'guideText2' => 'setGuideText2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'orderId' => 'getOrderId',
        'uniqueOrderNo' => 'getUniqueOrderNo',
        'channelInfoList' => 'getChannelInfoList',
        'shareToken' => 'getShareToken',
        'shareTokenExpiredTime' => 'getShareTokenExpiredTime',
        'guideText1' => 'getGuideText1',
        'guideText2' => 'getGuideText2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['uniqueOrderNo'] = isset($data['uniqueOrderNo']) ? $data['uniqueOrderNo'] : null;
        $this->container['channelInfoList'] = isset($data['channelInfoList']) ? $data['channelInfoList'] : null;
        $this->container['shareToken'] = isset($data['shareToken']) ? $data['shareToken'] : null;
        $this->container['shareTokenExpiredTime'] = isset($data['shareTokenExpiredTime']) ? $data['shareTokenExpiredTime'] : null;
        $this->container['guideText1'] = isset($data['guideText1']) ? $data['guideText1'] : null;
        $this->container['guideText2'] = isset($data['guideText2']) ? $data['guideText2'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code 返回码
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message 返回信息
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo 业务发起方商编
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo 商户编号
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId 商户订单号
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets uniqueOrderNo
     *
     * @return string
     */
    public function getUniqueOrderNo()
    {
        return $this->container['uniqueOrderNo'];
    }

    /**
     * Sets uniqueOrderNo
     *
     * @param string $uniqueOrderNo 易宝唯一流水号
     *
     * @return $this
     */
    public function setUniqueOrderNo($uniqueOrderNo)
    {
        $this->container['uniqueOrderNo'] = $uniqueOrderNo;

        return $this;
    }

    /**
     * Gets channelInfoList
     *
     * @return string
     */
    public function getChannelInfoList()
    {
        return $this->container['channelInfoList'];
    }

    /**
     * Sets channelInfoList
     *
     * @param string $channelInfoList 渠道营销信息
     *
     * @return $this
     */
    public function setChannelInfoList($channelInfoList)
    {
        $this->container['channelInfoList'] = $channelInfoList;

        return $this;
    }

    /**
     * Gets shareToken
     *
     * @return string
     */
    public function getShareToken()
    {
        return $this->container['shareToken'];
    }

    /**
     * Sets shareToken
     *
     * @param string $shareToken 吱口令
     *
     * @return $this
     */
    public function setShareToken($shareToken)
    {
        $this->container['shareToken'] = $shareToken;

        return $this;
    }

    /**
     * Gets shareTokenExpiredTime
     *
     * @return string
     */
    public function getShareTokenExpiredTime()
    {
        return $this->container['shareTokenExpiredTime'];
    }

    /**
     * Sets shareTokenExpiredTime
     *
     * @param string $shareTokenExpiredTime 吱口令过期时间
     *
     * @return $this
     */
    public function setShareTokenExpiredTime($shareTokenExpiredTime)
    {
        $this->container['shareTokenExpiredTime'] = $shareTokenExpiredTime;

        return $this;
    }

    /**
     * Gets guideText1
     *
     * @return string
     */
    public function getGuideText1()
    {
        return $this->container['guideText1'];
    }

    /**
     * Sets guideText1
     *
     * @param string $guideText1 吱口令分析引导文案前半段
     *
     * @return $this
     */
    public function setGuideText1($guideText1)
    {
        $this->container['guideText1'] = $guideText1;

        return $this;
    }

    /**
     * Gets guideText2
     *
     * @return string
     */
    public function getGuideText2()
    {
        return $this->container['guideText2'];
    }

    /**
     * Sets guideText2
     *
     * @param string $guideText2 吱口令分析引导文案后半段
     *
     * @return $this
     */
    public function setGuideText2($guideText2)
    {
        $this->container['guideText2'] = $guideText2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


