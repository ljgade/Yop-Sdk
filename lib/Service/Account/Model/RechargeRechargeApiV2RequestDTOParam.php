<?php
/**
 * RechargeRechargeApiV2RequestDTOParam
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * è´¦æˆ·
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * RechargeRechargeApiV2RequestDTOParam Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RechargeRechargeApiV2RequestDTOParam implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RechargeRechargeApiV2RequestDTOParam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchantNo' => 'string',
        'initiateMerchantNo' => 'string',
        'parentMerchantNo' => 'string',
        'appKey' => 'string',
        'requestNo' => 'string',
        'payType' => 'string',
        'amount' => 'float',
        'accountType' => 'string',
        'remark' => 'string',
        'notifyUrl' => 'string',
        'marketProductCode' => 'string',
        'clientIp' => 'string',
        'feeType' => 'string',
        'requestExtParams4NetPay' => '\Yeepay\Yop\Sdk\Service\Account\Model\RechargeEBankRequestDTOParam',
        'requestExtParams4BankPay' => '\Yeepay\Yop\Sdk\Service\Account\Model\RechargeBankPayRequestDTOParam',
        'quickPublicRequestDTO' => '\Yeepay\Yop\Sdk\Service\Account\Model\RechargeQuickPublicRequestDTOParam'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchantNo' => null,
        'initiateMerchantNo' => null,
        'parentMerchantNo' => null,
        'appKey' => null,
        'requestNo' => null,
        'payType' => null,
        'amount' => null,
        'accountType' => null,
        'remark' => null,
        'notifyUrl' => null,
        'marketProductCode' => null,
        'clientIp' => null,
        'feeType' => null,
        'requestExtParams4NetPay' => null,
        'requestExtParams4BankPay' => null,
        'quickPublicRequestDTO' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantNo' => 'merchantNo',
        'initiateMerchantNo' => 'initiateMerchantNo',
        'parentMerchantNo' => 'parentMerchantNo',
        'appKey' => 'appKey',
        'requestNo' => 'requestNo',
        'payType' => 'payType',
        'amount' => 'amount',
        'accountType' => 'accountType',
        'remark' => 'remark',
        'notifyUrl' => 'notifyUrl',
        'marketProductCode' => 'marketProductCode',
        'clientIp' => 'clientIp',
        'feeType' => 'feeType',
        'requestExtParams4NetPay' => 'requestExtParams4NetPay',
        'requestExtParams4BankPay' => 'requestExtParams4BankPay',
        'quickPublicRequestDTO' => 'quickPublicRequestDTO'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantNo' => 'setMerchantNo',
        'initiateMerchantNo' => 'setInitiateMerchantNo',
        'parentMerchantNo' => 'setParentMerchantNo',
        'appKey' => 'setAppKey',
        'requestNo' => 'setRequestNo',
        'payType' => 'setPayType',
        'amount' => 'setAmount',
        'accountType' => 'setAccountType',
        'remark' => 'setRemark',
        'notifyUrl' => 'setNotifyUrl',
        'marketProductCode' => 'setMarketProductCode',
        'clientIp' => 'setClientIp',
        'feeType' => 'setFeeType',
        'requestExtParams4NetPay' => 'setRequestExtParams4NetPay',
        'requestExtParams4BankPay' => 'setRequestExtParams4BankPay',
        'quickPublicRequestDTO' => 'setQuickPublicRequestDTO'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantNo' => 'getMerchantNo',
        'initiateMerchantNo' => 'getInitiateMerchantNo',
        'parentMerchantNo' => 'getParentMerchantNo',
        'appKey' => 'getAppKey',
        'requestNo' => 'getRequestNo',
        'payType' => 'getPayType',
        'amount' => 'getAmount',
        'accountType' => 'getAccountType',
        'remark' => 'getRemark',
        'notifyUrl' => 'getNotifyUrl',
        'marketProductCode' => 'getMarketProductCode',
        'clientIp' => 'getClientIp',
        'feeType' => 'getFeeType',
        'requestExtParams4NetPay' => 'getRequestExtParams4NetPay',
        'requestExtParams4BankPay' => 'getRequestExtParams4BankPay',
        'quickPublicRequestDTO' => 'getQuickPublicRequestDTO'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['initiateMerchantNo'] = isset($data['initiateMerchantNo']) ? $data['initiateMerchantNo'] : null;
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['appKey'] = isset($data['appKey']) ? $data['appKey'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['payType'] = isset($data['payType']) ? $data['payType'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['accountType'] = isset($data['accountType']) ? $data['accountType'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['notifyUrl'] = isset($data['notifyUrl']) ? $data['notifyUrl'] : null;
        $this->container['marketProductCode'] = isset($data['marketProductCode']) ? $data['marketProductCode'] : null;
        $this->container['clientIp'] = isset($data['clientIp']) ? $data['clientIp'] : null;
        $this->container['feeType'] = isset($data['feeType']) ? $data['feeType'] : null;
        $this->container['requestExtParams4NetPay'] = isset($data['requestExtParams4NetPay']) ? $data['requestExtParams4NetPay'] : null;
        $this->container['requestExtParams4BankPay'] = isset($data['requestExtParams4BankPay']) ? $data['requestExtParams4BankPay'] : null;
        $this->container['quickPublicRequestDTO'] = isset($data['quickPublicRequestDTO']) ? $data['quickPublicRequestDTO'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo merchantNo
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets initiateMerchantNo
     *
     * @return string
     */
    public function getInitiateMerchantNo()
    {
        return $this->container['initiateMerchantNo'];
    }

    /**
     * Sets initiateMerchantNo
     *
     * @param string $initiateMerchantNo initiateMerchantNo
     *
     * @return $this
     */
    public function setInitiateMerchantNo($initiateMerchantNo)
    {
        $this->container['initiateMerchantNo'] = $initiateMerchantNo;

        return $this;
    }

    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo parentMerchantNo
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets appKey
     *
     * @return string
     */
    public function getAppKey()
    {
        return $this->container['appKey'];
    }

    /**
     * Sets appKey
     *
     * @param string $appKey appKey
     *
     * @return $this
     */
    public function setAppKey($appKey)
    {
        $this->container['appKey'] = $appKey;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo requestNo
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets payType
     *
     * @return string
     */
    public function getPayType()
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType
     *
     * @param string $payType payType
     *
     * @return $this
     */
    public function setPayType($payType)
    {
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets accountType
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     *
     * @param string $accountType accountType
     *
     * @return $this
     */
    public function setAccountType($accountType)
    {
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets notifyUrl
     *
     * @return string
     */
    public function getNotifyUrl()
    {
        return $this->container['notifyUrl'];
    }

    /**
     * Sets notifyUrl
     *
     * @param string $notifyUrl notifyUrl
     *
     * @return $this
     */
    public function setNotifyUrl($notifyUrl)
    {
        $this->container['notifyUrl'] = $notifyUrl;

        return $this;
    }

    /**
     * Gets marketProductCode
     *
     * @return string
     */
    public function getMarketProductCode()
    {
        return $this->container['marketProductCode'];
    }

    /**
     * Sets marketProductCode
     *
     * @param string $marketProductCode marketProductCode
     *
     * @return $this
     */
    public function setMarketProductCode($marketProductCode)
    {
        $this->container['marketProductCode'] = $marketProductCode;

        return $this;
    }

    /**
     * Gets clientIp
     *
     * @return string
     */
    public function getClientIp()
    {
        return $this->container['clientIp'];
    }

    /**
     * Sets clientIp
     *
     * @param string $clientIp clientIp
     *
     * @return $this
     */
    public function setClientIp($clientIp)
    {
        $this->container['clientIp'] = $clientIp;

        return $this;
    }

    /**
     * Gets feeType
     *
     * @return string
     */
    public function getFeeType()
    {
        return $this->container['feeType'];
    }

    /**
     * Sets feeType
     *
     * @param string $feeType feeType
     *
     * @return $this
     */
    public function setFeeType($feeType)
    {
        $this->container['feeType'] = $feeType;

        return $this;
    }

    /**
     * Gets requestExtParams4NetPay
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\RechargeEBankRequestDTOParam
     */
    public function getRequestExtParams4NetPay()
    {
        return $this->container['requestExtParams4NetPay'];
    }

    /**
     * Sets requestExtParams4NetPay
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\RechargeEBankRequestDTOParam $requestExtParams4NetPay requestExtParams4NetPay
     *
     * @return $this
     */
    public function setRequestExtParams4NetPay($requestExtParams4NetPay)
    {
        $this->container['requestExtParams4NetPay'] = $requestExtParams4NetPay;

        return $this;
    }

    /**
     * Gets requestExtParams4BankPay
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\RechargeBankPayRequestDTOParam
     */
    public function getRequestExtParams4BankPay()
    {
        return $this->container['requestExtParams4BankPay'];
    }

    /**
     * Sets requestExtParams4BankPay
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\RechargeBankPayRequestDTOParam $requestExtParams4BankPay requestExtParams4BankPay
     *
     * @return $this
     */
    public function setRequestExtParams4BankPay($requestExtParams4BankPay)
    {
        $this->container['requestExtParams4BankPay'] = $requestExtParams4BankPay;

        return $this;
    }

    /**
     * Gets quickPublicRequestDTO
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\RechargeQuickPublicRequestDTOParam
     */
    public function getQuickPublicRequestDTO()
    {
        return $this->container['quickPublicRequestDTO'];
    }

    /**
     * Sets quickPublicRequestDTO
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\RechargeQuickPublicRequestDTOParam $quickPublicRequestDTO quickPublicRequestDTO
     *
     * @return $this
     */
    public function setQuickPublicRequestDTO($quickPublicRequestDTO)
    {
        $this->container['quickPublicRequestDTO'] = $quickPublicRequestDTO;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


