<?php
/**
 * AccountBookRefundAccountBookRefundRespDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * AccountBookRefundAccountBookRefundRespDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountBookRefundAccountBookRefundRespDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountBookRefundAccountBookRefundRespDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'returnCode' => 'string',
        'returnMsg' => 'string',
        'refundStatus' => 'string',
        'refundAmount' => 'float',
        'merchantRefundRequestNo' => 'string',
        'merchantOriginalRequestNo' => 'string',
        'refundOrderNo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'returnCode' => null,
        'returnMsg' => null,
        'refundStatus' => null,
        'refundAmount' => null,
        'merchantRefundRequestNo' => null,
        'merchantOriginalRequestNo' => null,
        'refundOrderNo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'returnCode' => 'returnCode',
        'returnMsg' => 'returnMsg',
        'refundStatus' => 'refundStatus',
        'refundAmount' => 'refundAmount',
        'merchantRefundRequestNo' => 'merchantRefundRequestNo',
        'merchantOriginalRequestNo' => 'merchantOriginalRequestNo',
        'refundOrderNo' => 'refundOrderNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'returnCode' => 'setReturnCode',
        'returnMsg' => 'setReturnMsg',
        'refundStatus' => 'setRefundStatus',
        'refundAmount' => 'setRefundAmount',
        'merchantRefundRequestNo' => 'setMerchantRefundRequestNo',
        'merchantOriginalRequestNo' => 'setMerchantOriginalRequestNo',
        'refundOrderNo' => 'setRefundOrderNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'returnCode' => 'getReturnCode',
        'returnMsg' => 'getReturnMsg',
        'refundStatus' => 'getRefundStatus',
        'refundAmount' => 'getRefundAmount',
        'merchantRefundRequestNo' => 'getMerchantRefundRequestNo',
        'merchantOriginalRequestNo' => 'getMerchantOriginalRequestNo',
        'refundOrderNo' => 'getRefundOrderNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['returnCode'] = isset($data['returnCode']) ? $data['returnCode'] : null;
        $this->container['returnMsg'] = isset($data['returnMsg']) ? $data['returnMsg'] : null;
        $this->container['refundStatus'] = isset($data['refundStatus']) ? $data['refundStatus'] : null;
        $this->container['refundAmount'] = isset($data['refundAmount']) ? $data['refundAmount'] : null;
        $this->container['merchantRefundRequestNo'] = isset($data['merchantRefundRequestNo']) ? $data['merchantRefundRequestNo'] : null;
        $this->container['merchantOriginalRequestNo'] = isset($data['merchantOriginalRequestNo']) ? $data['merchantOriginalRequestNo'] : null;
        $this->container['refundOrderNo'] = isset($data['refundOrderNo']) ? $data['refundOrderNo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets returnCode
     *
     * @return string
     */
    public function getReturnCode()
    {
        return $this->container['returnCode'];
    }

    /**
     * Sets returnCode
     *
     * @param string $returnCode 返回码
     *
     * @return $this
     */
    public function setReturnCode($returnCode)
    {
        $this->container['returnCode'] = $returnCode;

        return $this;
    }

    /**
     * Gets returnMsg
     *
     * @return string
     */
    public function getReturnMsg()
    {
        return $this->container['returnMsg'];
    }

    /**
     * Sets returnMsg
     *
     * @param string $returnMsg 返回信息
     *
     * @return $this
     */
    public function setReturnMsg($returnMsg)
    {
        $this->container['returnMsg'] = $returnMsg;

        return $this;
    }

    /**
     * Gets refundStatus
     *
     * @return string
     */
    public function getRefundStatus()
    {
        return $this->container['refundStatus'];
    }

    /**
     * Sets refundStatus
     *
     * @param string $refundStatus 退款状态
     *
     * @return $this
     */
    public function setRefundStatus($refundStatus)
    {
        $this->container['refundStatus'] = $refundStatus;

        return $this;
    }

    /**
     * Gets refundAmount
     *
     * @return float
     */
    public function getRefundAmount()
    {
        return $this->container['refundAmount'];
    }

    /**
     * Sets refundAmount
     *
     * @param float $refundAmount 退款金额
     *
     * @return $this
     */
    public function setRefundAmount($refundAmount)
    {
        $this->container['refundAmount'] = $refundAmount;

        return $this;
    }

    /**
     * Gets merchantRefundRequestNo
     *
     * @return string
     */
    public function getMerchantRefundRequestNo()
    {
        return $this->container['merchantRefundRequestNo'];
    }

    /**
     * Sets merchantRefundRequestNo
     *
     * @param string $merchantRefundRequestNo 商户退款请求号
     *
     * @return $this
     */
    public function setMerchantRefundRequestNo($merchantRefundRequestNo)
    {
        $this->container['merchantRefundRequestNo'] = $merchantRefundRequestNo;

        return $this;
    }

    /**
     * Gets merchantOriginalRequestNo
     *
     * @return string
     */
    public function getMerchantOriginalRequestNo()
    {
        return $this->container['merchantOriginalRequestNo'];
    }

    /**
     * Sets merchantOriginalRequestNo
     *
     * @param string $merchantOriginalRequestNo 商户原单请求号
     *
     * @return $this
     */
    public function setMerchantOriginalRequestNo($merchantOriginalRequestNo)
    {
        $this->container['merchantOriginalRequestNo'] = $merchantOriginalRequestNo;

        return $this;
    }

    /**
     * Gets refundOrderNo
     *
     * @return string
     */
    public function getRefundOrderNo()
    {
        return $this->container['refundOrderNo'];
    }

    /**
     * Sets refundOrderNo
     *
     * @param string $refundOrderNo 易宝退款单号
     *
     * @return $this
     */
    public function setRefundOrderNo($refundOrderNo)
    {
        $this->container['refundOrderNo'] = $refundOrderNo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


