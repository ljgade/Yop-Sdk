<?php
/**
 * HtbOpenAccountDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * HtbOpenAccountDTO Class Doc Comment
 *
 * @category Class
 * @description 华通银行拓展参数
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HtbOpenAccountDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HtbOpenAccountDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'businessLicenceEffectiveDate' => 'string',
        'businessLicenceExpirationDate' => 'string',
        'enterpriseEmail' => 'string',
        'mobileNo' => 'string',
        'legalLicenceEffectiveDate' => 'string',
        'legalLicenceExpirationDate' => 'string',
        'legalMobileNo' => 'string',
        'shareholderName' => 'string',
        'shareholderCertificateType' => 'string',
        'shareholderCertificateNo' => 'string',
        'shareholderEffectiveDate' => 'string',
        'shareholderExpirationDate' => 'string',
        'shareholderMobileNo' => 'string',
        'benefitName' => 'string',
        'benefitCertificateType' => 'string',
        'benefitCertificateNo' => 'string',
        'benefitEffectiveDate' => 'string',
        'benefitExpirationDate' => 'string',
        'benefitAddress' => 'string',
        'benefitMobileNo' => 'string',
        'registerProvince' => 'string',
        'registerCity' => 'string',
        'registerDistinct' => 'string',
        'registerAddress' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'businessLicenceEffectiveDate' => null,
        'businessLicenceExpirationDate' => null,
        'enterpriseEmail' => null,
        'mobileNo' => null,
        'legalLicenceEffectiveDate' => null,
        'legalLicenceExpirationDate' => null,
        'legalMobileNo' => null,
        'shareholderName' => null,
        'shareholderCertificateType' => null,
        'shareholderCertificateNo' => null,
        'shareholderEffectiveDate' => null,
        'shareholderExpirationDate' => null,
        'shareholderMobileNo' => null,
        'benefitName' => null,
        'benefitCertificateType' => null,
        'benefitCertificateNo' => null,
        'benefitEffectiveDate' => null,
        'benefitExpirationDate' => null,
        'benefitAddress' => null,
        'benefitMobileNo' => null,
        'registerProvince' => null,
        'registerCity' => null,
        'registerDistinct' => null,
        'registerAddress' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'businessLicenceEffectiveDate' => 'businessLicenceEffectiveDate',
        'businessLicenceExpirationDate' => 'businessLicenceExpirationDate',
        'enterpriseEmail' => 'enterpriseEmail',
        'mobileNo' => 'mobileNo',
        'legalLicenceEffectiveDate' => 'legalLicenceEffectiveDate',
        'legalLicenceExpirationDate' => 'legalLicenceExpirationDate',
        'legalMobileNo' => 'legalMobileNo',
        'shareholderName' => 'shareholderName',
        'shareholderCertificateType' => 'shareholderCertificateType',
        'shareholderCertificateNo' => 'shareholderCertificateNo',
        'shareholderEffectiveDate' => 'shareholderEffectiveDate',
        'shareholderExpirationDate' => 'shareholderExpirationDate',
        'shareholderMobileNo' => 'shareholderMobileNo',
        'benefitName' => 'benefitName',
        'benefitCertificateType' => 'benefitCertificateType',
        'benefitCertificateNo' => 'benefitCertificateNo',
        'benefitEffectiveDate' => 'benefitEffectiveDate',
        'benefitExpirationDate' => 'benefitExpirationDate',
        'benefitAddress' => 'benefitAddress',
        'benefitMobileNo' => 'benefitMobileNo',
        'registerProvince' => 'registerProvince',
        'registerCity' => 'registerCity',
        'registerDistinct' => 'registerDistinct',
        'registerAddress' => 'registerAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'businessLicenceEffectiveDate' => 'setBusinessLicenceEffectiveDate',
        'businessLicenceExpirationDate' => 'setBusinessLicenceExpirationDate',
        'enterpriseEmail' => 'setEnterpriseEmail',
        'mobileNo' => 'setMobileNo',
        'legalLicenceEffectiveDate' => 'setLegalLicenceEffectiveDate',
        'legalLicenceExpirationDate' => 'setLegalLicenceExpirationDate',
        'legalMobileNo' => 'setLegalMobileNo',
        'shareholderName' => 'setShareholderName',
        'shareholderCertificateType' => 'setShareholderCertificateType',
        'shareholderCertificateNo' => 'setShareholderCertificateNo',
        'shareholderEffectiveDate' => 'setShareholderEffectiveDate',
        'shareholderExpirationDate' => 'setShareholderExpirationDate',
        'shareholderMobileNo' => 'setShareholderMobileNo',
        'benefitName' => 'setBenefitName',
        'benefitCertificateType' => 'setBenefitCertificateType',
        'benefitCertificateNo' => 'setBenefitCertificateNo',
        'benefitEffectiveDate' => 'setBenefitEffectiveDate',
        'benefitExpirationDate' => 'setBenefitExpirationDate',
        'benefitAddress' => 'setBenefitAddress',
        'benefitMobileNo' => 'setBenefitMobileNo',
        'registerProvince' => 'setRegisterProvince',
        'registerCity' => 'setRegisterCity',
        'registerDistinct' => 'setRegisterDistinct',
        'registerAddress' => 'setRegisterAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'businessLicenceEffectiveDate' => 'getBusinessLicenceEffectiveDate',
        'businessLicenceExpirationDate' => 'getBusinessLicenceExpirationDate',
        'enterpriseEmail' => 'getEnterpriseEmail',
        'mobileNo' => 'getMobileNo',
        'legalLicenceEffectiveDate' => 'getLegalLicenceEffectiveDate',
        'legalLicenceExpirationDate' => 'getLegalLicenceExpirationDate',
        'legalMobileNo' => 'getLegalMobileNo',
        'shareholderName' => 'getShareholderName',
        'shareholderCertificateType' => 'getShareholderCertificateType',
        'shareholderCertificateNo' => 'getShareholderCertificateNo',
        'shareholderEffectiveDate' => 'getShareholderEffectiveDate',
        'shareholderExpirationDate' => 'getShareholderExpirationDate',
        'shareholderMobileNo' => 'getShareholderMobileNo',
        'benefitName' => 'getBenefitName',
        'benefitCertificateType' => 'getBenefitCertificateType',
        'benefitCertificateNo' => 'getBenefitCertificateNo',
        'benefitEffectiveDate' => 'getBenefitEffectiveDate',
        'benefitExpirationDate' => 'getBenefitExpirationDate',
        'benefitAddress' => 'getBenefitAddress',
        'benefitMobileNo' => 'getBenefitMobileNo',
        'registerProvince' => 'getRegisterProvince',
        'registerCity' => 'getRegisterCity',
        'registerDistinct' => 'getRegisterDistinct',
        'registerAddress' => 'getRegisterAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['businessLicenceEffectiveDate'] = isset($data['businessLicenceEffectiveDate']) ? $data['businessLicenceEffectiveDate'] : null;
        $this->container['businessLicenceExpirationDate'] = isset($data['businessLicenceExpirationDate']) ? $data['businessLicenceExpirationDate'] : null;
        $this->container['enterpriseEmail'] = isset($data['enterpriseEmail']) ? $data['enterpriseEmail'] : null;
        $this->container['mobileNo'] = isset($data['mobileNo']) ? $data['mobileNo'] : null;
        $this->container['legalLicenceEffectiveDate'] = isset($data['legalLicenceEffectiveDate']) ? $data['legalLicenceEffectiveDate'] : null;
        $this->container['legalLicenceExpirationDate'] = isset($data['legalLicenceExpirationDate']) ? $data['legalLicenceExpirationDate'] : null;
        $this->container['legalMobileNo'] = isset($data['legalMobileNo']) ? $data['legalMobileNo'] : null;
        $this->container['shareholderName'] = isset($data['shareholderName']) ? $data['shareholderName'] : null;
        $this->container['shareholderCertificateType'] = isset($data['shareholderCertificateType']) ? $data['shareholderCertificateType'] : null;
        $this->container['shareholderCertificateNo'] = isset($data['shareholderCertificateNo']) ? $data['shareholderCertificateNo'] : null;
        $this->container['shareholderEffectiveDate'] = isset($data['shareholderEffectiveDate']) ? $data['shareholderEffectiveDate'] : null;
        $this->container['shareholderExpirationDate'] = isset($data['shareholderExpirationDate']) ? $data['shareholderExpirationDate'] : null;
        $this->container['shareholderMobileNo'] = isset($data['shareholderMobileNo']) ? $data['shareholderMobileNo'] : null;
        $this->container['benefitName'] = isset($data['benefitName']) ? $data['benefitName'] : null;
        $this->container['benefitCertificateType'] = isset($data['benefitCertificateType']) ? $data['benefitCertificateType'] : null;
        $this->container['benefitCertificateNo'] = isset($data['benefitCertificateNo']) ? $data['benefitCertificateNo'] : null;
        $this->container['benefitEffectiveDate'] = isset($data['benefitEffectiveDate']) ? $data['benefitEffectiveDate'] : null;
        $this->container['benefitExpirationDate'] = isset($data['benefitExpirationDate']) ? $data['benefitExpirationDate'] : null;
        $this->container['benefitAddress'] = isset($data['benefitAddress']) ? $data['benefitAddress'] : null;
        $this->container['benefitMobileNo'] = isset($data['benefitMobileNo']) ? $data['benefitMobileNo'] : null;
        $this->container['registerProvince'] = isset($data['registerProvince']) ? $data['registerProvince'] : null;
        $this->container['registerCity'] = isset($data['registerCity']) ? $data['registerCity'] : null;
        $this->container['registerDistinct'] = isset($data['registerDistinct']) ? $data['registerDistinct'] : null;
        $this->container['registerAddress'] = isset($data['registerAddress']) ? $data['registerAddress'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['businessLicenceEffectiveDate'] === null) {
            $invalidProperties[] = "'businessLicenceEffectiveDate' can't be null";
        }
        if ($this->container['businessLicenceExpirationDate'] === null) {
            $invalidProperties[] = "'businessLicenceExpirationDate' can't be null";
        }
        if ($this->container['enterpriseEmail'] === null) {
            $invalidProperties[] = "'enterpriseEmail' can't be null";
        }
        if ($this->container['mobileNo'] === null) {
            $invalidProperties[] = "'mobileNo' can't be null";
        }
        if ($this->container['legalLicenceEffectiveDate'] === null) {
            $invalidProperties[] = "'legalLicenceEffectiveDate' can't be null";
        }
        if ($this->container['legalLicenceExpirationDate'] === null) {
            $invalidProperties[] = "'legalLicenceExpirationDate' can't be null";
        }
        if ($this->container['legalMobileNo'] === null) {
            $invalidProperties[] = "'legalMobileNo' can't be null";
        }
        if ($this->container['shareholderName'] === null) {
            $invalidProperties[] = "'shareholderName' can't be null";
        }
        if ($this->container['shareholderCertificateType'] === null) {
            $invalidProperties[] = "'shareholderCertificateType' can't be null";
        }
        if ($this->container['shareholderCertificateNo'] === null) {
            $invalidProperties[] = "'shareholderCertificateNo' can't be null";
        }
        if ($this->container['shareholderEffectiveDate'] === null) {
            $invalidProperties[] = "'shareholderEffectiveDate' can't be null";
        }
        if ($this->container['shareholderExpirationDate'] === null) {
            $invalidProperties[] = "'shareholderExpirationDate' can't be null";
        }
        if ($this->container['shareholderMobileNo'] === null) {
            $invalidProperties[] = "'shareholderMobileNo' can't be null";
        }
        if ($this->container['benefitName'] === null) {
            $invalidProperties[] = "'benefitName' can't be null";
        }
        if ($this->container['benefitCertificateType'] === null) {
            $invalidProperties[] = "'benefitCertificateType' can't be null";
        }
        if ($this->container['benefitCertificateNo'] === null) {
            $invalidProperties[] = "'benefitCertificateNo' can't be null";
        }
        if ($this->container['benefitEffectiveDate'] === null) {
            $invalidProperties[] = "'benefitEffectiveDate' can't be null";
        }
        if ($this->container['benefitExpirationDate'] === null) {
            $invalidProperties[] = "'benefitExpirationDate' can't be null";
        }
        if ($this->container['benefitAddress'] === null) {
            $invalidProperties[] = "'benefitAddress' can't be null";
        }
        if ($this->container['benefitMobileNo'] === null) {
            $invalidProperties[] = "'benefitMobileNo' can't be null";
        }
        if ($this->container['registerProvince'] === null) {
            $invalidProperties[] = "'registerProvince' can't be null";
        }
        if ($this->container['registerCity'] === null) {
            $invalidProperties[] = "'registerCity' can't be null";
        }
        if ($this->container['registerDistinct'] === null) {
            $invalidProperties[] = "'registerDistinct' can't be null";
        }
        if ($this->container['registerAddress'] === null) {
            $invalidProperties[] = "'registerAddress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets businessLicenceEffectiveDate
     *
     * @return string
     */
    public function getBusinessLicenceEffectiveDate()
    {
        return $this->container['businessLicenceEffectiveDate'];
    }

    /**
     * Sets businessLicenceEffectiveDate
     *
     * @param string $businessLicenceEffectiveDate 营业执照生效日期<br>格式:yyyyMMdd
     *
     * @return $this
     */
    public function setBusinessLicenceEffectiveDate($businessLicenceEffectiveDate)
    {
        $this->container['businessLicenceEffectiveDate'] = $businessLicenceEffectiveDate;

        return $this;
    }

    /**
     * Gets businessLicenceExpirationDate
     *
     * @return string
     */
    public function getBusinessLicenceExpirationDate()
    {
        return $this->container['businessLicenceExpirationDate'];
    }

    /**
     * Sets businessLicenceExpirationDate
     *
     * @param string $businessLicenceExpirationDate 营业执照失效日期<br>格式:yyyyMMdd<br>长期有效:forever
     *
     * @return $this
     */
    public function setBusinessLicenceExpirationDate($businessLicenceExpirationDate)
    {
        $this->container['businessLicenceExpirationDate'] = $businessLicenceExpirationDate;

        return $this;
    }

    /**
     * Gets enterpriseEmail
     *
     * @return string
     */
    public function getEnterpriseEmail()
    {
        return $this->container['enterpriseEmail'];
    }

    /**
     * Sets enterpriseEmail
     *
     * @param string $enterpriseEmail 企业邮箱
     *
     * @return $this
     */
    public function setEnterpriseEmail($enterpriseEmail)
    {
        $this->container['enterpriseEmail'] = $enterpriseEmail;

        return $this;
    }

    /**
     * Gets mobileNo
     *
     * @return string
     */
    public function getMobileNo()
    {
        return $this->container['mobileNo'];
    }

    /**
     * Sets mobileNo
     *
     * @param string $mobileNo 经办人手机号
     *
     * @return $this
     */
    public function setMobileNo($mobileNo)
    {
        $this->container['mobileNo'] = $mobileNo;

        return $this;
    }

    /**
     * Gets legalLicenceEffectiveDate
     *
     * @return string
     */
    public function getLegalLicenceEffectiveDate()
    {
        return $this->container['legalLicenceEffectiveDate'];
    }

    /**
     * Sets legalLicenceEffectiveDate
     *
     * @param string $legalLicenceEffectiveDate 法人证件生效日期<br>格式:yyyyMMdd
     *
     * @return $this
     */
    public function setLegalLicenceEffectiveDate($legalLicenceEffectiveDate)
    {
        $this->container['legalLicenceEffectiveDate'] = $legalLicenceEffectiveDate;

        return $this;
    }

    /**
     * Gets legalLicenceExpirationDate
     *
     * @return string
     */
    public function getLegalLicenceExpirationDate()
    {
        return $this->container['legalLicenceExpirationDate'];
    }

    /**
     * Sets legalLicenceExpirationDate
     *
     * @param string $legalLicenceExpirationDate 法人证件失效日期<br>格式:yyyyMMdd<br>长期有效:forever
     *
     * @return $this
     */
    public function setLegalLicenceExpirationDate($legalLicenceExpirationDate)
    {
        $this->container['legalLicenceExpirationDate'] = $legalLicenceExpirationDate;

        return $this;
    }

    /**
     * Gets legalMobileNo
     *
     * @return string
     */
    public function getLegalMobileNo()
    {
        return $this->container['legalMobileNo'];
    }

    /**
     * Sets legalMobileNo
     *
     * @param string $legalMobileNo 法人手机号
     *
     * @return $this
     */
    public function setLegalMobileNo($legalMobileNo)
    {
        $this->container['legalMobileNo'] = $legalMobileNo;

        return $this;
    }

    /**
     * Gets shareholderName
     *
     * @return string
     */
    public function getShareholderName()
    {
        return $this->container['shareholderName'];
    }

    /**
     * Sets shareholderName
     *
     * @param string $shareholderName 股东或实际控制人姓名
     *
     * @return $this
     */
    public function setShareholderName($shareholderName)
    {
        $this->container['shareholderName'] = $shareholderName;

        return $this;
    }

    /**
     * Gets shareholderCertificateType
     *
     * @return string
     */
    public function getShareholderCertificateType()
    {
        return $this->container['shareholderCertificateType'];
    }

    /**
     * Sets shareholderCertificateType
     *
     * @param string $shareholderCertificateType 股东或实际控制人证件类型<br>可选项如下:<br>ID_CARD:身份证
     *
     * @return $this
     */
    public function setShareholderCertificateType($shareholderCertificateType)
    {
        $this->container['shareholderCertificateType'] = $shareholderCertificateType;

        return $this;
    }

    /**
     * Gets shareholderCertificateNo
     *
     * @return string
     */
    public function getShareholderCertificateNo()
    {
        return $this->container['shareholderCertificateNo'];
    }

    /**
     * Sets shareholderCertificateNo
     *
     * @param string $shareholderCertificateNo 股东或实际控制人证件号
     *
     * @return $this
     */
    public function setShareholderCertificateNo($shareholderCertificateNo)
    {
        $this->container['shareholderCertificateNo'] = $shareholderCertificateNo;

        return $this;
    }

    /**
     * Gets shareholderEffectiveDate
     *
     * @return string
     */
    public function getShareholderEffectiveDate()
    {
        return $this->container['shareholderEffectiveDate'];
    }

    /**
     * Sets shareholderEffectiveDate
     *
     * @param string $shareholderEffectiveDate 股东或实际控制人证件生效日期<br>格式:yyyyMMdd
     *
     * @return $this
     */
    public function setShareholderEffectiveDate($shareholderEffectiveDate)
    {
        $this->container['shareholderEffectiveDate'] = $shareholderEffectiveDate;

        return $this;
    }

    /**
     * Gets shareholderExpirationDate
     *
     * @return string
     */
    public function getShareholderExpirationDate()
    {
        return $this->container['shareholderExpirationDate'];
    }

    /**
     * Sets shareholderExpirationDate
     *
     * @param string $shareholderExpirationDate 股东或实际控制人证件失效日期<br>格式:yyyyMMdd<br>长期有效:forever
     *
     * @return $this
     */
    public function setShareholderExpirationDate($shareholderExpirationDate)
    {
        $this->container['shareholderExpirationDate'] = $shareholderExpirationDate;

        return $this;
    }

    /**
     * Gets shareholderMobileNo
     *
     * @return string
     */
    public function getShareholderMobileNo()
    {
        return $this->container['shareholderMobileNo'];
    }

    /**
     * Sets shareholderMobileNo
     *
     * @param string $shareholderMobileNo 股东或实际控制人手机号
     *
     * @return $this
     */
    public function setShareholderMobileNo($shareholderMobileNo)
    {
        $this->container['shareholderMobileNo'] = $shareholderMobileNo;

        return $this;
    }

    /**
     * Gets benefitName
     *
     * @return string
     */
    public function getBenefitName()
    {
        return $this->container['benefitName'];
    }

    /**
     * Sets benefitName
     *
     * @param string $benefitName 受益人姓名
     *
     * @return $this
     */
    public function setBenefitName($benefitName)
    {
        $this->container['benefitName'] = $benefitName;

        return $this;
    }

    /**
     * Gets benefitCertificateType
     *
     * @return string
     */
    public function getBenefitCertificateType()
    {
        return $this->container['benefitCertificateType'];
    }

    /**
     * Sets benefitCertificateType
     *
     * @param string $benefitCertificateType 受益人证件类型<br>可选项如下:<br>ID_CARD:身份证
     *
     * @return $this
     */
    public function setBenefitCertificateType($benefitCertificateType)
    {
        $this->container['benefitCertificateType'] = $benefitCertificateType;

        return $this;
    }

    /**
     * Gets benefitCertificateNo
     *
     * @return string
     */
    public function getBenefitCertificateNo()
    {
        return $this->container['benefitCertificateNo'];
    }

    /**
     * Sets benefitCertificateNo
     *
     * @param string $benefitCertificateNo 受益人证件号
     *
     * @return $this
     */
    public function setBenefitCertificateNo($benefitCertificateNo)
    {
        $this->container['benefitCertificateNo'] = $benefitCertificateNo;

        return $this;
    }

    /**
     * Gets benefitEffectiveDate
     *
     * @return string
     */
    public function getBenefitEffectiveDate()
    {
        return $this->container['benefitEffectiveDate'];
    }

    /**
     * Sets benefitEffectiveDate
     *
     * @param string $benefitEffectiveDate 受益人证件生效日期<br>格式:yyyyMMdd
     *
     * @return $this
     */
    public function setBenefitEffectiveDate($benefitEffectiveDate)
    {
        $this->container['benefitEffectiveDate'] = $benefitEffectiveDate;

        return $this;
    }

    /**
     * Gets benefitExpirationDate
     *
     * @return string
     */
    public function getBenefitExpirationDate()
    {
        return $this->container['benefitExpirationDate'];
    }

    /**
     * Sets benefitExpirationDate
     *
     * @param string $benefitExpirationDate 受益人证件失效日期<br>格式:yyyyMMdd<br>长期有效:forever
     *
     * @return $this
     */
    public function setBenefitExpirationDate($benefitExpirationDate)
    {
        $this->container['benefitExpirationDate'] = $benefitExpirationDate;

        return $this;
    }

    /**
     * Gets benefitAddress
     *
     * @return string
     */
    public function getBenefitAddress()
    {
        return $this->container['benefitAddress'];
    }

    /**
     * Sets benefitAddress
     *
     * @param string $benefitAddress 受益人住址
     *
     * @return $this
     */
    public function setBenefitAddress($benefitAddress)
    {
        $this->container['benefitAddress'] = $benefitAddress;

        return $this;
    }

    /**
     * Gets benefitMobileNo
     *
     * @return string
     */
    public function getBenefitMobileNo()
    {
        return $this->container['benefitMobileNo'];
    }

    /**
     * Sets benefitMobileNo
     *
     * @param string $benefitMobileNo 受益人手机号
     *
     * @return $this
     */
    public function setBenefitMobileNo($benefitMobileNo)
    {
        $this->container['benefitMobileNo'] = $benefitMobileNo;

        return $this;
    }

    /**
     * Gets registerProvince
     *
     * @return string
     */
    public function getRegisterProvince()
    {
        return $this->container['registerProvince'];
    }

    /**
     * Sets registerProvince
     *
     * @param string $registerProvince 商户注册省编码<br>详见<a href=\"/attachments/access?fileId=Vgl7WwDQsC\">《省市区编码》</a>
     *
     * @return $this
     */
    public function setRegisterProvince($registerProvince)
    {
        $this->container['registerProvince'] = $registerProvince;

        return $this;
    }

    /**
     * Gets registerCity
     *
     * @return string
     */
    public function getRegisterCity()
    {
        return $this->container['registerCity'];
    }

    /**
     * Sets registerCity
     *
     * @param string $registerCity 商户注册市编码<br>详见<br><a href=\"/attachments/access?fileId=Vgl7WwDQsC\">《省市区编码》</a>
     *
     * @return $this
     */
    public function setRegisterCity($registerCity)
    {
        $this->container['registerCity'] = $registerCity;

        return $this;
    }

    /**
     * Gets registerDistinct
     *
     * @return string
     */
    public function getRegisterDistinct()
    {
        return $this->container['registerDistinct'];
    }

    /**
     * Sets registerDistinct
     *
     * @param string $registerDistinct 商户注册区编码<br>详见<br><a href=\"/attachments/access?fileId=Vgl7WwDQsC\">《省市区编码》</a>
     *
     * @return $this
     */
    public function setRegisterDistinct($registerDistinct)
    {
        $this->container['registerDistinct'] = $registerDistinct;

        return $this;
    }

    /**
     * Gets registerAddress
     *
     * @return string
     */
    public function getRegisterAddress()
    {
        return $this->container['registerAddress'];
    }

    /**
     * Sets registerAddress
     *
     * @param string $registerAddress 商户注册地址
     *
     * @return $this
     */
    public function setRegisterAddress($registerAddress)
    {
        $this->container['registerAddress'] = $registerAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


