<?php
/**
 * BankPaymentOrderBankAccountPaymentRequestDtoParam
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * BankPaymentOrderBankAccountPaymentRequestDtoParam Class Doc Comment
 *
 * @category Class
 * @description 方法签名第0个参数，请自行修改arg0等参数的名字
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankPaymentOrderBankAccountPaymentRequestDtoParam implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankPaymentOrderBankAccountPaymentRequestDtoParam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'businessMarket' => 'string',
        'yopMerchantNo' => 'string',
        'marketingProductCode' => 'string',
        'requestIp' => 'string',
        'appKey' => 'string',
        'parentMerchantNo' => 'string',
        'merchantNo' => 'string',
        'orderInfo' => '\Yeepay\Yop\Sdk\Service\Account\Model\BankPaymentOrderOrderInfoDtoParam',
        'payerInfo' => '\Yeepay\Yop\Sdk\Service\Account\Model\BankPaymentOrderBankAccountPaymentPayerInfoDtoParam',
        'batchNos' => 'string[]',
        'tradeScene' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'businessMarket' => null,
        'yopMerchantNo' => null,
        'marketingProductCode' => null,
        'requestIp' => null,
        'appKey' => null,
        'parentMerchantNo' => null,
        'merchantNo' => null,
        'orderInfo' => null,
        'payerInfo' => null,
        'batchNos' => null,
        'tradeScene' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'businessMarket' => 'businessMarket',
        'yopMerchantNo' => 'yopMerchantNo',
        'marketingProductCode' => 'marketingProductCode',
        'requestIp' => 'requestIp',
        'appKey' => 'appKey',
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantNo' => 'merchantNo',
        'orderInfo' => 'orderInfo',
        'payerInfo' => 'payerInfo',
        'batchNos' => 'batchNos',
        'tradeScene' => 'tradeScene'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'businessMarket' => 'setBusinessMarket',
        'yopMerchantNo' => 'setYopMerchantNo',
        'marketingProductCode' => 'setMarketingProductCode',
        'requestIp' => 'setRequestIp',
        'appKey' => 'setAppKey',
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'orderInfo' => 'setOrderInfo',
        'payerInfo' => 'setPayerInfo',
        'batchNos' => 'setBatchNos',
        'tradeScene' => 'setTradeScene'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'businessMarket' => 'getBusinessMarket',
        'yopMerchantNo' => 'getYopMerchantNo',
        'marketingProductCode' => 'getMarketingProductCode',
        'requestIp' => 'getRequestIp',
        'appKey' => 'getAppKey',
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'orderInfo' => 'getOrderInfo',
        'payerInfo' => 'getPayerInfo',
        'batchNos' => 'getBatchNos',
        'tradeScene' => 'getTradeScene'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['businessMarket'] = isset($data['businessMarket']) ? $data['businessMarket'] : null;
        $this->container['yopMerchantNo'] = isset($data['yopMerchantNo']) ? $data['yopMerchantNo'] : null;
        $this->container['marketingProductCode'] = isset($data['marketingProductCode']) ? $data['marketingProductCode'] : null;
        $this->container['requestIp'] = isset($data['requestIp']) ? $data['requestIp'] : null;
        $this->container['appKey'] = isset($data['appKey']) ? $data['appKey'] : null;
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['orderInfo'] = isset($data['orderInfo']) ? $data['orderInfo'] : null;
        $this->container['payerInfo'] = isset($data['payerInfo']) ? $data['payerInfo'] : null;
        $this->container['batchNos'] = isset($data['batchNos']) ? $data['batchNos'] : null;
        $this->container['tradeScene'] = isset($data['tradeScene']) ? $data['tradeScene'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets businessMarket
     *
     * @return string
     */
    public function getBusinessMarket()
    {
        return $this->container['businessMarket'];
    }

    /**
     * Sets businessMarket
     *
     * @param string $businessMarket businessMarket
     *
     * @return $this
     */
    public function setBusinessMarket($businessMarket)
    {
        $this->container['businessMarket'] = $businessMarket;

        return $this;
    }

    /**
     * Gets yopMerchantNo
     *
     * @return string
     */
    public function getYopMerchantNo()
    {
        return $this->container['yopMerchantNo'];
    }

    /**
     * Sets yopMerchantNo
     *
     * @param string $yopMerchantNo yopMerchantNo
     *
     * @return $this
     */
    public function setYopMerchantNo($yopMerchantNo)
    {
        $this->container['yopMerchantNo'] = $yopMerchantNo;

        return $this;
    }

    /**
     * Gets marketingProductCode
     *
     * @return string
     */
    public function getMarketingProductCode()
    {
        return $this->container['marketingProductCode'];
    }

    /**
     * Sets marketingProductCode
     *
     * @param string $marketingProductCode marketingProductCode
     *
     * @return $this
     */
    public function setMarketingProductCode($marketingProductCode)
    {
        $this->container['marketingProductCode'] = $marketingProductCode;

        return $this;
    }

    /**
     * Gets requestIp
     *
     * @return string
     */
    public function getRequestIp()
    {
        return $this->container['requestIp'];
    }

    /**
     * Sets requestIp
     *
     * @param string $requestIp requestIp
     *
     * @return $this
     */
    public function setRequestIp($requestIp)
    {
        $this->container['requestIp'] = $requestIp;

        return $this;
    }

    /**
     * Gets appKey
     *
     * @return string
     */
    public function getAppKey()
    {
        return $this->container['appKey'];
    }

    /**
     * Sets appKey
     *
     * @param string $appKey appKey
     *
     * @return $this
     */
    public function setAppKey($appKey)
    {
        $this->container['appKey'] = $appKey;

        return $this;
    }

    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo parentMerchantNo
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo merchantNo
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets orderInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\BankPaymentOrderOrderInfoDtoParam
     */
    public function getOrderInfo()
    {
        return $this->container['orderInfo'];
    }

    /**
     * Sets orderInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\BankPaymentOrderOrderInfoDtoParam $orderInfo orderInfo
     *
     * @return $this
     */
    public function setOrderInfo($orderInfo)
    {
        $this->container['orderInfo'] = $orderInfo;

        return $this;
    }

    /**
     * Gets payerInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\BankPaymentOrderBankAccountPaymentPayerInfoDtoParam
     */
    public function getPayerInfo()
    {
        return $this->container['payerInfo'];
    }

    /**
     * Sets payerInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\BankPaymentOrderBankAccountPaymentPayerInfoDtoParam $payerInfo payerInfo
     *
     * @return $this
     */
    public function setPayerInfo($payerInfo)
    {
        $this->container['payerInfo'] = $payerInfo;

        return $this;
    }

    /**
     * Gets batchNos
     *
     * @return string[]
     */
    public function getBatchNos()
    {
        return $this->container['batchNos'];
    }

    /**
     * Sets batchNos
     *
     * @param string[] $batchNos batchNos
     *
     * @return $this
     */
    public function setBatchNos($batchNos)
    {
        $this->container['batchNos'] = $batchNos;

        return $this;
    }

    /**
     * Gets tradeScene
     *
     * @return string
     */
    public function getTradeScene()
    {
        return $this->container['tradeScene'];
    }

    /**
     * Sets tradeScene
     *
     * @param string $tradeScene tradeScene
     *
     * @return $this
     */
    public function setTradeScene($tradeScene)
    {
        $this->container['tradeScene'] = $tradeScene;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


